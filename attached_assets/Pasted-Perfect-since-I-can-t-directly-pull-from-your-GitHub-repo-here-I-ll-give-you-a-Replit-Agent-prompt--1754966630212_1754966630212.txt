Perfect—since I can’t directly pull from your GitHub repo here, I’ll give you a Replit Agent prompt that reads your repo’s current files and applies the Apple‑inspired UI patches safely (idempotent, with backups), without touching any backend logic, env, or Supabase wiring.

Copy‑paste this whole prompt into your Replit Agent:

⸻

Replit Agent — Apply Apple‑Inspired UI (safe, backend‑agnostic)

Goal: Polish the existing front end to an Apple‑inspired look (glass, hairlines, pill buttons, subtle motion) without breaking data, routes, or Supabase. Create design tokens, update Tailwind, minimally restyle the shell and a few UI primitives. Keep everything TypeScript‑clean.

Do not change backend code, env, Supabase client, hooks, or page logic.

0) Prep
	1.	Ensure we’re on the main branch, clean working tree:

git status
git checkout main || true
git pull --rebase || true

	2.	Record important paths (try in order and pick the first that exists):

	•	Tailwind config: tailwind.config.ts or client/tailwind.config.ts
	•	Global CSS: client/src/index.css or client/src/styles/globals.css
	•	App layout:
	•	client/src/layouts/AppLayout.tsx
	•	or client/src/components/layout/AppLayout.tsx
	•	or client/src/components/AppLayout.tsx
	•	Buttons: client/src/components/ui/button.tsx
	•	Inputs: client/src/components/ui/input.tsx

Print each detected path before editing.

Create a timestamped backup folder:

mkdir -p _backups/ui-apple-$(date +%Y%m%d-%H%M%S)

1) Design tokens (new file)

Create client/src/styles/design-tokens.css with exact content:

:root {
  /* Accent */
  --accent: 10 132 255; /* #0A84FF */
  --accent-foreground: 255 255 255;

  /* Surfaces & glass */
  --surface: 18 18 18;
  --surface-2: 28 28 30;
  --glass-bg: 255 255 255;
  --glass-border: 255 255 255;

  /* Radii & shadows */
  --radius: 14px;
  --shadow-soft: 0 1px 0 rgba(255,255,255,.04) inset, 0 6px 20px rgba(0,0,0,.25);
  --shadow-strong: 0 1px 0 rgba(255,255,255,.04) inset, 0 16px 40px rgba(0,0,0,.35);

  /* Typography stack */
  --font-sans: ui-sans-serif, system-ui, -apple-system, "SF Pro Text", "SF Pro Display", Inter, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

:root, .dark {
  color-scheme: dark;
  --bg: 0 0 0;
  --fg: 255 255 255;
  --muted: 235 235 245;
  --muted-alpha: 0.6;
}

@media (prefers-color-scheme: light) {
  :root {
    --bg: 242 242 247;
    --fg: 20 20 22;
    --surface: 255 255 255;
    --surface-2: 248 248 250;
    --shadow-soft: 0 1px 0 rgba(0,0,0,.02) inset, 0 6px 20px rgba(0,0,0,.08);
    --shadow-strong: 0 1px 0 rgba(0,0,0,.02) inset, 0 16px 40px rgba(0,0,0,.12);
  }
}

@layer utilities {
  .glass {
    backdrop-filter: blur(14px);
    -webkit-backdrop-filter: blur(14px);
    background-color: rgba(var(--glass-bg), 0.06);
    border: 1px solid rgba(var(--glass-border), .12);
    box-shadow: var(--shadow-soft);
  }
  .surface-card {
    background-color: rgb(var(--surface));
    border: 1px solid rgba(var(--glass-border), .1);
    box-shadow: var(--shadow-soft);
    border-radius: var(--radius);
  }
  .hairline { border: 1px solid rgba(var(--glass-border), .10); }
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  * { transition: none !important; animation: none !important; transform: none !important; }
}

2) Wire tokens into Tailwind

Open the detected tailwind.config.ts. Backup it:

cp -f <DETECTED_TAILWIND_CONFIG> _backups/ui-apple-*/tailwind.config.ts

Edit it so:
	•	content includes at least: ./index.html, ./client/src/**/*.{ts,tsx}, and if your structure differs, include ./src/**/*.{ts,tsx}.
	•	Under theme.extend, add these entries (merge if they exist; don’t delete existing):

extend: {
  fontFamily: {
    sans: ['var(--font-sans)'],
  },
  colors: {
    background: 'rgb(var(--bg))',
    foreground: 'rgb(var(--fg))',
    accent: 'rgb(var(--accent))',
    'accent-foreground': 'rgb(var(--accent-foreground))',
    surface: 'rgb(var(--surface))',
    'surface-2': 'rgb(var(--surface-2))',
  },
  borderRadius: {
    lg: 'var(--radius)',
    xl: 'calc(var(--radius) + 4px)',
  },
  boxShadow: {
    soft: 'var(--shadow-soft)',
    strong: 'var(--shadow-strong)',
  },
}

Keep any existing themes; just extend.

3) Import tokens globally

Open the detected global CSS (e.g., client/src/index.css or client/src/styles/globals.css). Backup it, then ensure at the very top:

@import "./styles/design-tokens.css";

If the file is at a different relative path, adjust the import accordingly.

4) Update UI primitives

4a) Button

If client/src/components/ui/button.tsx exists, backup then minimally enhance classes:
	•	For the default/primary variant, ensure these utility classes are included in the className:
	•	rounded-full shadow-soft transition-all duration-200
	•	bg-[rgb(var(--accent))] text-[rgb(var(--accent-foreground))]
	•	hover:opacity-95 active:translate-y-[1px] active:shadow-none
	•	focus-visible:ring-2 focus-visible:ring-[rgb(var(--accent))]/40
	•	For a ghost variant (or link‑like), ensure:
	•	rounded-full glass hover:bg-white/10

Do not change the component API or props; only add/adjust classes.

4b) Input

If client/src/components/ui/input.tsx exists, backup then add:
	•	glass rounded-xl px-4 py-2.5 placeholder-white/40 focus-visible:ring-2 focus-visible:ring-[rgb(var(--accent))]/40 outline-none transition

Keep its props/forwardRef intact.

5) App shell polish (header)

Find the existing App layout (AppLayout.tsx). Backup it, then only restyle markup—do not change data, hooks, or auth logic. Apply:
	•	Make header a glass toolbar:
	•	Container: className="sticky top-0 z-50 glass h-16 flex items-center justify-between px-6"
	•	Left side: app title + ProjectSwitcher select (glass rounded-full px-3 py-1.5 text-sm)
	•	Right side: nav links as segmented pills (rounded-full px-3 py-1.5 text-sm hover:bg-white/10 transition)
	•	Keep existing Link components and supabase.auth.signOut() logic untouched.
	•	Wrap page content with: <main className="max-w-7xl mx-auto p-6 space-y-6">{children}</main>

If your layout file currently sets document.title in a child component, leave it alone; this is style‑only.

6) Accent runtime helper (optional)

Create client/src/lib/appearance.ts:

export function setAccent(rgb: string) {
  document.documentElement.style.setProperty('--accent', rgb);
}

(Do not wire a UI for this now.)

7) Feature flag (optional)

If client/src/flags.ts exists, append:

export const APPLE_SKIN = true; // flip to false to quickly revert styles

We are not branching logic on it right now; it’s just a kill‑switch for future.

8) Install motion lib (optional; skip if already present)

cd client
npm i framer-motion --silent || true
cd ..

Don’t add new animations yet; the CSS transitions are enough.

9) Verify

cd client
npm run typecheck || npx tsc --noEmit
npm run build
cd ..

If any TypeScript issues appear, print them and fix only style‑related imports you just touched. Do not alter Supabase code, env, or hooks.

10) Commit

git add -A
git commit -m "feat(ui): Apple-inspired skin (glass, hairlines, pill buttons, subtle motion) — no backend changes"
git push

Then print a short summary:
	•	Which files were updated (paths).
	•	Where the tokens file was created.
	•	Final tailwind.config.ts location.
	•	Typecheck/build status.

⸻

Notes / Guardrails
	•	Do not rename routes, pages, or exports; we’re restyling only.
	•	Do not delete any existing Tailwind config—only extend.
	•	Do not modify Supabase env or clients.
	•	Keep className APIs the same for shared components.

⸻

Once this runs, you’ll have the cleaner Apple‑inspired skin. If you want me to tailor exact tweaks to your current AppLayout.tsx, button.tsx, or tailwind.config.ts, I can generate targeted patches—you can paste those file contents here, or have the agent print them for me to review.