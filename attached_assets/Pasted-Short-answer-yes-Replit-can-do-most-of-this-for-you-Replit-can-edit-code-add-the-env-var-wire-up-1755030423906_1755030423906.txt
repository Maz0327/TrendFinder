Short answer: yes—Replit can do most of this for you.
Replit can edit code, add the env var, wire up the /auth/callback route, and restart the app. The only bits Replit can’t do are the Supabase Dashboard and Google Cloud settings (those must be done by you in the browser).

Here’s a copy-paste runbook for the Replit Agent, with human stops clearly marked.

⸻

Replit Task: Fix Google OAuth redirects (Replit public URL + local)

What the agent should do
	1.	Create a small helper for the site URL

	•	Add client/src/lib/siteUrl.ts (or src/lib/siteUrl.ts if that’s your structure):

export function getSiteUrl() {
  return import.meta.env.VITE_SITE_URL || window.location.origin;
}

	2.	Update the Google sign-in call to use the helper

	•	Find your Google sign-in call (e.g., client/src/pages/Login.tsx or wherever the button lives).
	•	Replace the call body with:

import { getSiteUrl } from "@/lib/siteUrl"; // adjust path if needed

const baseUrl = getSiteUrl();

await supabase.auth.signInWithOAuth({
  provider: "google",
  options: {
    redirectTo: `${baseUrl}/auth/callback`,
    queryParams: { access_type: "offline", prompt: "consent" }
    // flowType: "pkce", // optional later
  },
});

	3.	Remove hardcoded localhost redirects

	•	Search the repo for localhost:5173 and replace any redirect/callback occurrences with ${baseUrl} via the same helper.
(Keep plain localhost only in README or example docs.)

	4.	Ensure the callback route exists

	•	Confirm your router includes:

<Route path="/auth/callback" element={<AuthCallback />} />

	•	Confirm your Supabase client is initialized with:

auth: { detectSessionInUrl: true, persistSession: true, autoRefreshToken: true }

	5.	Set the env var in Replit

	•	Create/update secret: VITE_SITE_URL = your stable Replit public URL (e.g. https://<repl-name>.<username>.repl.co).
	•	Do not use the ephemeral *.kirk.replit.dev preview domain.

	6.	Quick verification

	•	Run npm run build (or your build script) to typecheck.
	•	Start the app and open it using the public Replit URL (not the “external preview”).
	•	Click “Sign in with Google” and confirm you land on /auth/callback and then into the app.

⸻

HUMAN STEP (you do this in the browser)
	1.	Supabase Dashboard → Auth → Providers → Google
	•	Add BOTH redirect URIs:
	•	https://<your-stable-replit-public-domain>/auth/callback
	•	http://localhost:5173/auth/callback
	•	Save.
	2.	Supabase Dashboard → Auth → URL Configuration
	•	Site URL = your same stable Replit public URL (matches VITE_SITE_URL).
	3.	(If you created a brand-new Google OAuth client) Google Cloud Console
	•	OAuth 2.0 client’s Authorized redirect URIs should include both URIs above.
	•	If your app is in “Testing”, add your email to Test users.

⸻

Smoke test (agent can guide, you click)
	•	Open the app at the public Replit URL.
	•	Click Sign in with Google.
	•	You should briefly hit /auth/callback and then see a logged-in state (e.g., your user menu, protected pages loading).
	•	If you still see a localhost:5173 URL in the address bar after login, it means something is still hardcoded—search/replace again.

⸻

Recap
	•	Replit can do: code edits, env setup, router/redirect wiring, build & restart.
	•	You must do: Supabase Auth settings + (possibly) Google Cloud OAuth redirect URIs.

If you want, I can also add a tiny “health check” page that prints out getSiteUrl() and the configured callback so you can eyeball it quickly before testing Google.