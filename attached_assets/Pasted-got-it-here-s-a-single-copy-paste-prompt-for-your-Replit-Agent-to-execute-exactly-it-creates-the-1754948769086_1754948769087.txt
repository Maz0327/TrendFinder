got it — here’s a single, copy‑paste prompt for your Replit Agent to execute exactly. it creates the full app shell (navbar + sidebar), auth screens, project switcher & protected routing, without breaking any existing pages.

⸻

Replit Agent — Task: Add App Shell, Auth, Project Switcher (Non‑Destructive)

Objectives
	1.	Add a top navbar + left sidebar layout that wraps existing pages
	2.	Add minimal email/password auth + optional Google OAuth
	3.	Add project switcher wired to useProjects() and localStorage
	4.	Protect routes behind auth; keep existing routes working
	5.	Keep dark theme, feature flags, no schema changes

If any import path differs (e.g., Supabase client file), search and adjust paths accordingly.

⸻

0) Pre‑flight
	•	Ensure repo is clean:

git status

If pending changes look unrelated, git stash -k before proceeding (and pop at the end).

⸻

1) Add/Update Feature Flags

Edit client/src/flags.ts (create if missing):

// client/src/flags.ts
export const ENABLE_NAV_SHELL = true;
export const ENABLE_PROJECT_SWITCHER = true;

// keep existing flags below if present (do not remove others)


⸻

2) Project Context (active project persisted)

Add client/src/context/ProjectContext.tsx:

// client/src/context/ProjectContext.tsx
import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';

type ProjectContextType = {
  activeProjectId: string | null;
  setActiveProjectId: (id: string | null) => void;
};

const ProjectContext = createContext<ProjectContextType | undefined>(undefined);

const STORAGE_KEY = 'active_project_id';

export const ProjectProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [activeProjectId, setActiveProjectIdState] = useState<string | null>(null);

  useEffect(() => {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved) setActiveProjectIdState(saved);
  }, []);

  const setActiveProjectId = (id: string | null) => {
    setActiveProjectIdState(id);
    if (id) localStorage.setItem(STORAGE_KEY, id);
    else localStorage.removeItem(STORAGE_KEY);
  };

  const value = useMemo(() => ({ activeProjectId, setActiveProjectId }), [activeProjectId]);

  return <ProjectContext.Provider value={value}>{children}</ProjectContext.Provider>;
};

export const useProjectContext = () => {
  const ctx = useContext(ProjectContext);
  if (!ctx) throw new Error('useProjectContext must be used within ProjectProvider');
  return ctx;
};


⸻

3) App Layout (navbar + sidebar shell)

Add client/src/components/layout/AppLayout.tsx:

// client/src/components/layout/AppLayout.tsx
import React, { useState } from 'react';
import { NavLink, Link } from 'react-router-dom';
import { ENABLE_NAV_SHELL, ENABLE_PROJECT_SWITCHER } from '@/flags';
import { ProjectSwitcher } from './ProjectSwitcher';

const NavItem: React.FC<{ to: string; label: string; onClick?: () => void }> = ({ to, label, onClick }) => (
  <NavLink
    to={to}
    onClick={onClick}
    className={({ isActive }) =>
      `block rounded-md px-3 py-2 text-sm hover:bg-zinc-800 transition ${
        isActive ? 'bg-zinc-800 text-white' : 'text-zinc-300'
      }`
    }
  >
    {label}
  </NavLink>
);

export const AppLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  if (!ENABLE_NAV_SHELL) return <>{children}</>;

  const [collapsed, setCollapsed] = useState<boolean>(() => {
    const v = localStorage.getItem('sidebar_collapsed');
    return v === '1';
  });

  const toggle = () => {
    const next = !collapsed;
    setCollapsed(next);
    localStorage.setItem('sidebar_collapsed', next ? '1' : '0');
  };

  return (
    <div className="min-h-screen bg-zinc-950 text-zinc-100">
      {/* Top bar */}
      <header className="sticky top-0 z-30 border-b border-zinc-800 bg-zinc-900/80 backdrop-blur">
        <div className="mx-auto flex h-14 items-center gap-3 px-4">
          <button
            onClick={toggle}
            className="rounded-md border border-zinc-700 px-2 py-1 text-xs hover:bg-zinc-800"
            aria-label="Toggle sidebar"
          >
            {collapsed ? '☰' : '×'}
          </button>
          <Link to="/" className="font-semibold tracking-wide text-zinc-100">
            Content Radar
          </Link>
          <div className="mx-3 flex-1">
            <input
              type="search"
              placeholder="Search captures, moments, briefs…"
              className="w-full rounded-md border border-zinc-700 bg-zinc-900 px-3 py-1.5 text-sm outline-none focus:ring-2 focus:ring-zinc-600"
            />
          </div>
          {/* User avatar placeholder */}
          <div className="size-8 rounded-full bg-zinc-700" />
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside
          className={`h-[calc(100vh-56px)] shrink-0 border-r border-zinc-800 bg-zinc-900 p-3 transition-all ${
            collapsed ? 'w-[56px]' : 'w-64'
          }`}
        >
          {!collapsed && ENABLE_PROJECT_SWITCHER && (
            <div className="mb-3">
              <ProjectSwitcher />
            </div>
          )}

          <nav className="space-y-1">
            <NavItem to="/dashboard" label="Dashboard" />
            <NavItem to="/captures-inbox" label="Captures Inbox" />
            <NavItem to="/moments-radar" label="Moments Radar" />
            <NavItem to="/brief-builder-v2" label="Brief Builder" />
            <NavItem to="/feeds" label="Feeds" />
            <NavItem to="/settings" label="Settings" />
          </nav>
        </aside>

        {/* Content */}
        <main className="min-h-[calc(100vh-56px)] flex-1 p-4">{children}</main>
      </div>
    </div>
  );
};


⸻

4) Project Switcher

Add client/src/components/layout/ProjectSwitcher.tsx:

// client/src/components/layout/ProjectSwitcher.tsx
import React, { useState } from 'react';
import { useProjectContext } from '@/context/ProjectContext';
import { useProjects } from '@/hooks/useProjects';

export const ProjectSwitcher: React.FC = () => {
  const { activeProjectId, setActiveProjectId } = useProjectContext();
  const { data, isLoading, error, addProject } = useProjects();
  const [newName, setNewName] = useState('');

  if (isLoading) return <div className="text-xs text-zinc-400">Loading projects…</div>;
  if (error) return <div className="text-xs text-red-400">Failed to load projects</div>;

  const projects = data ?? [];

  return (
    <div className="rounded-md border border-zinc-700 bg-zinc-950 p-2">
      <div className="mb-2 text-xs uppercase tracking-wide text-zinc-400">Project</div>
      <select
        value={activeProjectId ?? ''}
        onChange={(e) => setActiveProjectId(e.target.value || null)}
        className="mb-2 w-full rounded-md border border-zinc-700 bg-zinc-900 px-2 py-1 text-sm"
      >
        <option value="">All projects</option>
        {projects.map((p: any) => (
          <option key={p.id} value={p.id}>
            {p.name || '(untitled)'}
          </option>
        ))}
      </select>

      <div className="mt-2 flex gap-2">
        <input
          value={newName}
          onChange={(e) => setNewName(e.target.value)}
          placeholder="New project name"
          className="flex-1 rounded-md border border-zinc-700 bg-zinc-900 px-2 py-1 text-sm"
        />
        <button
          onClick={() => {
            if (!newName.trim()) return;
            addProject.mutate({ name: newName.trim() });
            setNewName('');
          }}
          className="rounded-md border border-zinc-700 bg-zinc-800 px-2 text-sm hover:bg-zinc-700"
        >
          + Add
        </button>
      </div>
    </div>
  );
};


⸻

5) Auth Guard

Add client/src/components/auth/AuthGuard.tsx:

// client/src/components/auth/AuthGuard.tsx
import React, { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabaseClient'; // adjust path if different
import { useNavigate } from 'react-router-dom';

export const AuthGuard: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [ready, setReady] = useState(false);
  const [authed, setAuthed] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    let mounted = true;

    const check = async () => {
      const { data } = await supabase.auth.getSession();
      if (!mounted) return;
      setAuthed(!!data.session);
      setReady(true);
      if (!data.session) navigate('/login', { replace: true });
    };

    check();
    const { data: sub } = supabase.auth.onAuthStateChange((_e, session) => {
      if (!mounted) return;
      setAuthed(!!session);
      if (!session) navigate('/login', { replace: true });
    });

    return () => {
      mounted = false;
      sub.subscription.unsubscribe();
    };
  }, [navigate]);

  if (!ready) return <div className="p-8 text-zinc-300">Checking session…</div>;
  if (!authed) return null;
  return <>{children}</>;
};

If your Supabase client is at another path, search the repo for createClient( to find it and update the import above.

⸻

6) Login & Register pages

Add client/src/pages/login.tsx:

// client/src/pages/login.tsx
import React, { useState } from 'react';
import { supabase } from '@/lib/supabaseClient'; // adjust if needed
import { Link, useNavigate } from 'react-router-dom';

export default function LoginPage() {
  const nav = useNavigate();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState('');

  const onLogin = async () => {
    setBusy(true);
    setErr('');
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    setBusy(false);
    if (error) {
      setErr(error.message);
    } else {
      nav('/captures-inbox');
    }
  };

  const onGoogle = async () => {
    setBusy(true);
    setErr('');
    const { error } = await supabase.auth.signInWithOAuth({ provider: 'google' });
    setBusy(false);
    if (error) setErr(error.message);
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-zinc-950 p-6 text-zinc-100">
      <div className="w-full max-w-sm rounded-lg border border-zinc-800 bg-zinc-900 p-6">
        <h1 className="mb-4 text-xl font-semibold">Sign in</h1>
        {err && <div className="mb-3 rounded-md border border-red-500/40 bg-red-500/10 p-2 text-sm text-red-300">{err}</div>}
        <div className="space-y-3">
          <input
            type="email"
            className="w-full rounded-md border border-zinc-700 bg-zinc-950 px-3 py-2 text-sm"
            placeholder="email@domain.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            type="password"
            className="w-full rounded-md border border-zinc-700 bg-zinc-950 px-3 py-2 text-sm"
            placeholder="••••••••"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <button
            onClick={onLogin}
            disabled={busy}
            className="w-full rounded-md bg-zinc-700 px-3 py-2 text-sm hover:bg-zinc-600 disabled:opacity-50"
          >
            {busy ? 'Signing in…' : 'Sign in'}
          </button>
          <button
            onClick={onGoogle}
            className="w-full rounded-md border border-zinc-700 px-3 py-2 text-sm hover:bg-zinc-800"
          >
            Continue with Google
          </button>
        </div>
        <div className="mt-4 text-sm text-zinc-400">
          No account?{' '}
          <Link to="/register" className="text-zinc-200 underline">
            Register
          </Link>
        </div>
      </div>
    </div>
  );
}

Add client/src/pages/register.tsx:

// client/src/pages/register.tsx
import React, { useState } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { Link, useNavigate } from 'react-router-dom';

export default function RegisterPage() {
  const nav = useNavigate();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState('');

  const onRegister = async () => {
    setBusy(true);
    setErr('');
    const { error } = await supabase.auth.signUp({ email, password });
    setBusy(false);
    if (error) setErr(error.message);
    else nav('/captures-inbox');
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-zinc-950 p-6 text-zinc-100">
      <div className="w-full max-w-sm rounded-lg border border-zinc-800 bg-zinc-900 p-6">
        <h1 className="mb-4 text-xl font-semibold">Create account</h1>
        {err && <div className="mb-3 rounded-md border border-red-500/40 bg-red-500/10 p-2 text-sm text-red-300">{err}</div>}
        <div className="space-y-3">
          <input
            type="email"
            className="w-full rounded-md border border-zinc-700 bg-zinc-950 px-3 py-2 text-sm"
            placeholder="email@domain.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            type="password"
            className="w-full rounded-md border border-zinc-700 bg-zinc-950 px-3 py-2 text-sm"
            placeholder="Min 6 chars"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <button
            onClick={onRegister}
            disabled={busy}
            className="w-full rounded-md bg-zinc-700 px-3 py-2 text-sm hover:bg-zinc-600 disabled:opacity-50"
          >
            {busy ? 'Creating…' : 'Create account'}
          </button>
        </div>
        <div className="mt-4 text-sm text-zinc-400">
          Already have an account?{' '}
          <Link to="/login" className="text-zinc-200 underline">
            Sign in
          </Link>
        </div>
      </div>
    </div>
  );
}


⸻

7) Wrap routes with layout + guard

Update client/src/App.tsx (adjust if file path differs). Do not remove existing routes—wrap them. If your router setup is different, adapt accordingly.

// client/src/App.tsx
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { AppLayout } from '@/components/layout/AppLayout';
import { ProjectProvider } from '@/context/ProjectContext';

// Existing pages (adjust imports if paths differ)
import CapturesInbox from '@/pages/captures-inbox';         // if default export; otherwise adapt
import MomentsRadar from '@/pages/moments-radar';
import BriefBuilderV2 from '@/pages/brief-builder-v2';
import FeedsPage from '@/pages/feeds';
import SettingsPage from '@/pages/settings';                 // create placeholder if missing

import LoginPage from '@/pages/login';
import RegisterPage from '@/pages/register';

const Dashboard = () => (
  <div className="rounded-md border border-zinc-800 bg-zinc-900 p-4">
    <h2 className="text-lg font-semibold">Dashboard</h2>
    <p className="mt-2 text-sm text-zinc-300">Welcome to Content Radar.</p>
  </div>
);

// Fallback placeholder if settings page doesn't exist
const SettingsFallback = () => (
  <div className="rounded-md border border-zinc-800 bg-zinc-900 p-4">
    <h2 className="text-lg font-semibold">Settings</h2>
    <p className="mt-2 text-sm text-zinc-300">Settings coming soon.</p>
  </div>
);

export default function App() {
  const Settings = SettingsPage || SettingsFallback;

  return (
    <BrowserRouter>
      <Routes>
        {/* Public */}
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />

        {/* Protected */}
        <Route
          path="/"
          element={
            <AuthGuard>
              <ProjectProvider>
                <AppLayout>
                  {/* children rendered by nested routes */}
                </AppLayout>
              </ProjectProvider>
            </AuthGuard>
          }
        >
          <Route index element={<Navigate to="/captures-inbox" replace />} />
          <Route path="dashboard" element={<Dashboard />} />
          <Route path="captures-inbox" element={<CapturesInbox />} />
          <Route path="moments-radar" element={<MomentsRadar />} />
          <Route path="brief-builder-v2" element={<BriefBuilderV2 />} />
          <Route path="feeds" element={<FeedsPage />} />
          <Route path="settings" element={<Settings />} />
        </Route>

        {/* Fallback */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

If your CapturesInbox, MomentsRadar, etc., are named exports or paths differ, search and correct imports.

⸻

8) Thread active project into Feeds (non‑breaking)

Edit client/src/pages/feeds.tsx to use project context if the hook allows a projectId param:

// near top
import { useProjectContext } from '@/context/ProjectContext';

// inside component:
const { activeProjectId } = useProjectContext();

// when calling useUserFeeds:
const { data: feeds, isLoading, error, createFeed, toggleActive, deleteFeed } = useUserFeeds(activeProjectId || undefined);

If useUserFeeds already accepts a param, pass it. Otherwise, skip this step (non‑blocking).

⸻

9) Build & Verify

npm run typecheck
npm run build

	•	Confirm: 0 TypeScript errors, build passes.
	•	Start dev (if needed) and test login → layout renders → navigation works.

⸻

10) Commit & Push

git add -A
git commit -m "feat(ui): app shell with navbar/sidebar, auth pages, project switcher, protected routes"
git push origin main

If you stashed earlier:

git stash pop || true

Resolve any trivial conflicts and commit.

⸻

Acceptance Criteria
	•	Visiting while logged out → /login shows
	•	After login → /captures-inbox loads inside new layout
	•	Sidebar nav works (Dashboard, Captures Inbox, Moments Radar, Brief Builder, Feeds, Settings)
	•	Project switcher lists projects & creates a new one; selection persists
	•	No schema changes; all existing pages continue to function
	•	npm run typecheck and npm run build both pass

⸻

If any import path for Supabase client or pages differs, search/replace accordingly and proceed.