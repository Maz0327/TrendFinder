Amazing‚Äîthis is exactly what we wanted. With the unified API in place (auth, CORS, pagination, tags, search), we‚Äôre ready to wire the UI to it, remove any lingering direct Supabase calls, and finish the Brief Builder loop (autosave + export).

Below is the next copy-paste runbook for Replit, followed by a tiny human checklist.

‚∏ª

üîß REPLIT TASK BLOCK #4 ‚Äî Wire UI to Unified API, Remove Direct Supabase Calls, Add Autosave + Export Hooks

Goal:
	1.	Ensure all client data access goes through our server API (no direct Supabase calls).
	2.	Add Brief Canvas autosave + optimistic drafts.
	3.	Expose ‚ÄúExport to Google Slides‚Äù action in the UI using the already-built server route.
	4.	Add end-to-end smoke tests.

‚∏ª

0) Project context & guardrails
	‚Ä¢	Use the current branch (do not create a new repo).
	‚Ä¢	Keep all changes incremental and idempotent.
	‚Ä¢	Preserve existing env usage and feature flags.

‚∏ª

1) Find and quarantine any lingering direct Supabase calls

Actions
	1.	Search for imports like from '@supabase/supabase-js', supabase.from(, createClient in the client codebase.
	2.	For each occurrence, refactor to call our client services that hit the server API (e.g., client/src/services/*.ts), not Supabase directly.
	3.	If a service is missing an API wrapper, create it (GET/POST/PUT/DELETE) and type it against our shared response models.

Concrete commands

rg "from '@supabase/supabase-js'|createClient|supabase\.from\(" -n client || true

Refactor targets (examples):
	‚Ä¢	client/src/hooks/useBriefs.ts
	‚Ä¢	client/src/hooks/useCaptures.ts
	‚Ä¢	client/src/hooks/useMoments.ts
	‚Ä¢	client/src/services/feeds.ts

Acceptance
	‚Ä¢	No direct @supabase/supabase-js imports in client code (except the auth bootstrap if strictly required).
	‚Ä¢	All data mutations/queries route through /api/* endpoints with Bearer token auth.

‚∏ª

2) Standardize client services to match the new API response format

Actions
	1.	Open client/src/services/*.ts and ensure each service adheres to:
	‚Ä¢	Authorization: Bearer <access_token>
	‚Ä¢	Pagination: ?page=&pageSize=&q=&tags=
	‚Ä¢	Returns { data: T[]; total: number; page: number; pageSize: number } (or the exact format implemented in server).
	2.	Provide helpers: buildQuery(params), apiFetch<T>(path, options) with robust error handling and 401 handling (redirect to login if token invalid).

Add file (if missing): client/src/services/api.ts
	‚Ä¢	getToken() from auth provider
	‚Ä¢	apiFetch<T>() wrapper
	‚Ä¢	buildQuery()

Acceptance
	‚Ä¢	All services consume the wrapper and compile cleanly.
	‚Ä¢	401/403 handled predictably (logout/redirect).

‚∏ª

3) Brief Builder: autosave + draft recovery (client-side)

Actions
	1.	Implement client/src/ui/brief-canvas/autoSave.ts with:
	‚Ä¢	useDebouncedAutoSave({ briefId, blocks, notes, delay=1200 })
	‚Ä¢	Debounced PUT /api/briefs/:id with minimal payload Œî (only changed fields).
	2.	Add local draft store to survive refresh:
	‚Ä¢	localStorage key: brief-draft:<briefId>
	‚Ä¢	Persist on every local edit (throttled 300ms).
	‚Ä¢	On mount: if server version < local draft timestamp, prompt: ‚ÄúRestore local draft?‚Äù
	3.	Wire autosave + restore into BriefCanvasPage (or its container).

Acceptance
	‚Ä¢	Edits survive refresh/navigation.
	‚Ä¢	Saving is silent (tiny ‚ÄúSaved‚Äù toast), errors surface with a retry button.
	‚Ä¢	No runaway save loops (debounce and change-detection in place).

‚∏ª

4) Brief export: client button ‚Üí server route ‚Üí Google Slides

Actions
	1.	In the brief detail/canvas header, add:
	‚Ä¢	Primary button: Export ‚Üí Google Slides
	‚Ä¢	On click: POST /api/briefs/:id/export/slides
	‚Ä¢	If 401 from Google, call /api/auth/google/start?redirect=/briefs/:id or open a modal to connect.
	2.	Show export progress/toast; on success show ‚ÄúOpen in Slides‚Äù link from server response.

Acceptance
	‚Ä¢	Export succeeds when user has Google connected.
	‚Ä¢	Error states are visible and actionable (connect Google, retry, etc).

‚∏ª

5) UI: tags, pagination, search

Actions
	1.	Captures Inbox: ensure list fetches with ?page&pageSize&q&tags and renders tag chips + selected-tag filters.
	2.	Moments Radar: load with ?q&tags, and show tag filters (multi-select).
	3.	Briefs list: add search input + tag filter bar; infinite scroll or pager.

Acceptance
	‚Ä¢	Lists behave consistently with the new API.
	‚Ä¢	URL query params reflect filters (so pages are shareable/reloadable).

‚∏ª

6) Testing & smoke suite

Actions
	1.	Add/update scripts/smoke.ts to call:
	‚Ä¢	GET /api/captures?page=1&pageSize=10
	‚Ä¢	GET /api/moments?page=1
	‚Ä¢	GET /api/briefs?page=1
	‚Ä¢	POST /api/briefs/:id/export/slides (mock mode if GOOGLE_MOCK=1)
	2.	Ensure npm run smoke prints PASS/FAIL for each.

Acceptance
	‚Ä¢	npm run typecheck ‚Üí PASS
	‚Ä¢	npm run build ‚Üí PASS
	‚Ä¢	npm run smoke ‚Üí PASS
	‚Ä¢	Manual click-through of Captures‚ÜíMoments‚ÜíBriefs works with auth

‚∏ª

7) Housekeeping

Actions
	‚Ä¢	Remove dead Supabase client code from client (except auth bootstrap if needed).
	‚Ä¢	Update client/src/flags.ts to keep BRIEF_EXPORT, GOOGLE_* flags on.
	‚Ä¢	Confirm .env.example lists required keys for local dev.

‚∏ª

8) Output
	‚Ä¢	Commit with message:
feat(ui): route all data via unified API; add brief autosave+draft recovery; wire Google export
	‚Ä¢	Push to current branch and report:
	‚Ä¢	files updated
	‚Ä¢	any remaining direct Supabase references (should be 0)
	‚Ä¢	smoke + build status

‚∏ª

Human stop (very short)

After the agent completes:
	‚Ä¢	Do a quick manual pass:
	‚Ä¢	Login ‚Üí Captures (filter by a tag) ‚Üí open capture detail ‚Üí add to brief.
	‚Ä¢	Open Brief Canvas, make a small edit, refresh the page ‚Üí confirm draft restores prompt.
	‚Ä¢	Click Export to Google Slides (if Google is connected) ‚Üí confirm a Slides URL is returned.

If any of those fail, tell me which screen and we‚Äôll tweak that specific part.

‚∏ª

Why this sequence?
	‚Ä¢	We lock the one-way in (server API), which stabilizes security and performance.
	‚Ä¢	We make Brief Canvas resilient (autosave + recovery) before polishing UX.
	‚Ä¢	We connect the export now that the back end is live‚Äîso you can demo end-to-end.

When you‚Äôre ready, I‚Äôll give you the next block (polish pass + error toasts + perf tweaks + ‚Äúheartbeat‚Äù background checks).