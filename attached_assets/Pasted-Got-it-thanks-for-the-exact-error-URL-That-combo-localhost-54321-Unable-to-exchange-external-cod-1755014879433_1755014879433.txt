Got it—thanks for the exact error URL. That combo (localhost:54321 + Unable to exchange external code) almost always means two things at once:
	1.	your Google provider isn’t fully/accurately configured in Supabase (so the token exchange fails), and
	2.	your redirect target is pointing at http://localhost:54321 (Supabase CLI default), not your app (e.g. http://localhost:5173 or your deployed URL).

I’ll give you a tight runbook the Replit agent can execute, with two quick human stops for the Google Console and Supabase Dashboard.

⸻

RUNBOOK — Fix Google OAuth “Unable to exchange external code” + 54321 redirect

Goal:
✅ Correct Google Provider config in Supabase
✅ Ensure app redirects to the right origin (not 54321)
✅ Verify end-to-end login

⸻

0) Sanity checks (agent)
	•	Print critical env values so we know what the app is actually using:
	•	VITE_SUPABASE_URL
	•	VITE_SUPABASE_ANON_KEY
	•	VITE_SITE_URL

Commands (agent):

echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL"
echo "VITE_SUPABASE_ANON_KEY=${#VITE_SUPABASE_ANON_KEY} chars"
echo "VITE_SITE_URL=$VITE_SITE_URL"
grep -R "54321" -n client || true

If any reference to 54321 is found in repo (aside from logs) → show the file/line and pause.

⸻

1) Force the app to use the correct redirect base (agent)

Open your Supabase client login code (where we call supabase.auth.signInWithOAuth), and ensure it passes redirectTo using your site URL. Patch if needed:

const baseUrl =
  (import.meta as any).env?.VITE_SITE_URL || window.location.origin;

await supabase.auth.signInWithOAuth({
  provider: 'google',
  options: {
    redirectTo: `${baseUrl}/auth/callback`,
    queryParams: { access_type: 'offline', prompt: 'consent' }
  }
});

Also ensure .env contains the right site URL (local or deployed):

VITE_SITE_URL=http://localhost:5173

Commands (agent):

# Ensure .env has VITE_SITE_URL set to 5173 for local dev
awk 'BEGIN{found=0} /^VITE_SITE_URL=/{found=1} {print} END{if(!found) print "VITE_SITE_URL=http://localhost:5173"}' .env > .env.new && mv .env.new .env


⸻

2) Add/confirm callback route (agent)
	•	Ensure we have a /auth/callback page that simply waits for Supabase session and then navigate('/').
	•	If missing, create client/src/pages/AuthCallback.tsx (like we used earlier).
	•	Ensure the router registers:

<Route path="/auth/callback" element={<AuthCallback />} />



Commands (agent):

# Quick grep to verify callback exists
grep -R "AuthCallback" -n client || true
grep -R "path=\"/auth/callback\"" -n client || true

If missing, create it and add the route; otherwise continue.

⸻

🚦 HUMAN STOP A — Google Cloud Console

Open Google Cloud Console → APIs & Services → Credentials → OAuth 2.0 Client IDs → (your Web client) and verify:
	•	Type: Web application (not iOS/Android/TV).
	•	Authorized redirect URIs: exactly

https://<YOUR_PROJECT_REF>.supabase.co/auth/v1/callback

(This is the only redirect Google needs for Supabase.)

	•	If your consent screen is in Testing, make sure your Google account is listed as a Test user.
	•	If you recently rotated the client secret, make sure you’ve updated Supabase providers with the current Client ID & Secret (next stop).

Reply “DONE A” when finished.

⸻

🚦 HUMAN STOP B — Supabase Dashboard

Open Supabase → Authentication → Providers → Google:
	•	Enabled: ON
	•	Client ID / Client Secret: match the same credentials from Google (Step A). Save.
	•	Authentication → URL Configuration:
	•	Site URL: set to your app (local: http://localhost:5173 or your deployed URL).
	•	Additional Redirect URLs: include

http://localhost:5173/auth/callback
<YOUR_DEPLOYED_URL>/auth/callback  (if applicable)



Save.

Reply “DONE B” when finished.

⸻

3) Clean state & retest (agent)

Clear any stale auth/session and test cleanly:

Commands (agent):

# Typecheck & build before running
npm run typecheck || npx tsc --noEmit
npm run build || true

# Start dev server (if the agent manages run, otherwise skip)
# npm run dev

Manual: open the app, try Sign in with Google again.

Expected flow:
	•	Google → Supabase exchange (succeeds now) → redirect to your app /auth/callback (5173 or your deployed origin) → auto-navigate into the app as an authenticated user.

If you still see an error:
	•	Copy the full URL of the error page.
	•	Note the value of redirect_uri= (must be https://<project>.supabase.co/auth/v1/callback).
	•	Confirm the host of your app page (should be 5173, not 54321).
	•	Tell me exactly what it shows; I’ll adjust the fix quickly.

⸻

Why this happened
	•	The Unable to exchange external code error means Google → Supabase token exchange failed—almost always due to mismatched Client ID/Secret or the OAuth client type / redirect URI not matching Supabase expectations.
	•	The localhost:54321 host is a Supabase CLI default. If your app or Supabase “Site URL” pointed there, redirects got sent to the wrong place. We fixed your app’s redirectTo and asked you to set the proper Site URL and Additional Redirect URLs in Supabase.

Try this runbook and tell me where (if anywhere) it hiccups. I’ll keep it moving with you.