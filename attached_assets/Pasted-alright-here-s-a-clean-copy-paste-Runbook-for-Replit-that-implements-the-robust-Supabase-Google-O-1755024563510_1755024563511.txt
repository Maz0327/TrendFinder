alright — here’s a clean, copy-paste Runbook for Replit that implements the robust Supabase Google OAuth callback (handles both ?code= and #access_token= flows), adds the route, updates the sign-in, and includes the human steps you need to do in Supabase.

⸻

RUNBOOK — Fix Google OAuth Callback (Supabase + React)

Goal: make Google sign-in work reliably by adding a callback page that handles both PKCE (?code=…) and implicit (#access_token=…) flows, wiring the route, and making sure env + Supabase settings are correct.

Assumptions:
• Client code lives under client/src/…
• Supabase client is at client/src/integrations/supabase/client.ts (Lovable default)
• React Router is used

⸻

Step 1 — Ensure Supabase client parses URL tokens

Agent (Replit), do:
	1.	Open client/src/integrations/supabase/client.ts. If the file doesn’t exist, search the repo for createClient( to find the active client and edit that file instead.
	2.	Replace the file’s contents with:

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL!;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true, // <-- critical: lets the client consume code/hash
  },
});

	3.	Save.

⸻

Step 2 — Add a robust /auth/callback page

Agent (Replit), do:
	1.	Create file client/src/pages/AuthCallback.tsx with:

import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';

function getHashParam(name: string) {
  const hash = new URLSearchParams(window.location.hash.slice(1));
  return hash.get(name);
}

export default function AuthCallback() {
  const navigate = useNavigate();

  useEffect(() => {
    let timeout: number;

    (async () => {
      try {
        // Case A: PKCE / code in query string
        const url = new URL(window.location.href);
        const code = url.searchParams.get('code');

        if (code) {
          const { error } = await supabase.auth.exchangeCodeForSession(window.location.href);
          history.replaceState(null, '', url.pathname);
          if (error) throw error;
          timeout = window.setTimeout(() => navigate('/'), 50);
          return;
        }

        // Case B: Implicit flow / tokens in hash
        const access_token = getHashParam('access_token');
        const refresh_token = getHashParam('refresh_token');

        if (access_token && refresh_token) {
          const { error } = await supabase.auth.setSession({ access_token, refresh_token });
          history.replaceState(null, '', window.location.pathname);
          if (error) throw error;
          timeout = window.setTimeout(() => navigate('/'), 50);
          return;
        }

        // Fallback: let supabase pick up anything it can
        await supabase.auth.getSession();
        if (window.location.hash) {
          history.replaceState(null, '', window.location.pathname);
        }
        timeout = window.setTimeout(() => navigate('/'), 50);
      } catch {
        timeout = window.setTimeout(() => navigate('/login'), 50);
      }
    })();

    return () => window.clearTimeout(timeout);
  }, [navigate]);

  return (
    <div className="min-h-[60vh] flex items-center justify-center text-sm text-muted-foreground">
      Finishing sign-in…
    </div>
  );
}

	2.	Save.

⸻

Step 3 — Wire the route

Agent (Replit), do:
	1.	Locate the central routing file (commonly client/src/main.tsx or client/src/App.tsx). Search for <Routes>.
	2.	Import the page and add the route:

import AuthCallback from '@/pages/AuthCallback';

// inside <Routes> … </Routes>
<Route path="/auth/callback" element={<AuthCallback />} />

	3.	Save.

⸻

Step 4 — Update Google sign-in to use the callback URL

Agent (Replit), do:
	1.	Search the codebase for the Google sign-in call:
	•	Find signInWithOAuth({ provider: 'google' (likely in a login page or header).
	2.	Replace the call with this version (preserve your component structure, just update the function call body):

const baseUrl = import.meta.env.VITE_SITE_URL || window.location.origin;

await supabase.auth.signInWithOAuth({
  provider: 'google',
  options: {
    redirectTo: `${baseUrl}/auth/callback`,
    queryParams: {
      access_type: 'offline',
      prompt: 'consent',
    },
    // flowType: 'pkce', // optional later; this page already supports both
  },
});

	3.	Save.

⸻

Step 5 — Set env vars

Agent (Replit), do:
	1.	Ensure these Secrets exist (values already provided earlier in this project):
	•	VITE_SUPABASE_URL
	•	VITE_SUPABASE_ANON_KEY
	2.	Create or update a Secret for the site URL (for local dev you can default via code; on Replit it’s safer to set explicitly):
	•	VITE_SITE_URL → set to your Replit web URL (e.g., https://<your-repl>.replit.app)
	•	If you also run locally, you can temporarily set this to http://localhost:5173 when testing locally.
	3.	Save secrets.

HUMAN STEP (in Supabase Dashboard):
	•	Go to Authentication → Providers → Google → Settings
	•	Ensure the Authorized redirect URIs include both of these (adjust domain if needed):
	•	http://localhost:5173/auth/callback
	•	https://<your-repl>.replit.app/auth/callback
	•	Save provider settings.

⸻

Step 6 — Test the flow

Agent (Replit), do:
	1.	Start the dev server (use the existing project scripts; if you need to run in the client folder, do so accordingly):
	•	npm run dev
(or) npm run dev --prefix client
	2.	Open the app in the browser.
	3.	Click “Sign in with Google”.
	4.	After Google, you should land on /auth/callback briefly and then be redirected to /.

If it doesn’t redirect or you still see the hash in the URL:
	•	Check the browser console for errors.
	•	Report the filename and line number of any error.

⸻

Step 7 — Verify session

Agent (Replit), do:
	1.	In a convenient place (e.g., the header layout or a small test component), call:

import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

useEffect(() => {
  supabase.auth.getUser().then(({ data }) => {
    console.log('Current user:', data.user);
  });
}, []);

	2.	Refresh. Confirm the console logs the user object after login.

⸻

Step 8 — Commit

Agent (Replit), do:
	1.	git add -A
	2.	git commit -m "OAuth: robust auth callback + route + sign-in redirect"
	3.	git push

⸻

Notes & FAQ
	•	Why both flows?
Some environments (or older code) end up with implicit tokens in the hash (#access_token=). Others use PKCE (?code=). This callback handles both, clears the URL, and gets you into the app.
	•	Do I need to enable PKCE now?
Not required — you can uncomment flowType: 'pkce' later. The callback supports it already.
	•	I still get redirect_uri_mismatch
Double-check the exact domain + path you’re using is in Supabase’s Google provider authorized redirect URIs.
	•	Replit vs Local
You can swap VITE_SITE_URL between your Replit URL and http://localhost:5173 as you test. The code falls back to window.location.origin if unset.

⸻

Run this as-is. If anything fails, tell me the exact file path and error, and I’ll patch it.