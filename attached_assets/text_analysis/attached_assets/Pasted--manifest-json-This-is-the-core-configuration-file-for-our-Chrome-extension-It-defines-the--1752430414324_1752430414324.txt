// manifest.json
// This is the core configuration file for our Chrome extension.
// It defines the extension's name, permissions, and what file to show when the user clicks the icon.
{
  "manifest_version": 3,
  "name": "Content Opportunity Engine",
  "version": "1.0",
  "description": "Capture cultural signals from anywhere on the web with a single click.",
  "permissions": [
    "activeTab"
  ],
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "images/icon16.png",
      "48": "images/icon48.png",
      "128": "images/icon128.png"
    }
  },
  "icons": {
      "16": "images/icon16.png",
      "48": "images/icon48.png",
      "128": "images/icon128.png"
  }
}
```html
<!-- popup.html -->
<!-- This is the HTML file for the small window that appears when a user clicks the extension icon. -->
<!-- It's styled with Tailwind CSS for a clean, modern look. -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Content Opportunity Engine</title>
    <script src="[https://cdn.tailwindcss.com](https://cdn.tailwindcss.com)"></script>
    <link rel="preconnect" href="[https://fonts.googleapis.com](https://fonts.googleapis.com)">
    <link rel="preconnect" href="[https://fonts.gstatic.com](https://fonts.gstatic.com)" crossorigin>
    <link href="[https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap](https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap)" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            width: 320px;
            background-color: #f9fafb; /* gray-50 */
        }
    </style>
</head>
<body class="p-4">

    <div class="space-y-4">
        <header class="flex items-center space-x-2">
            <img src="images/icon48.png" alt="Logo" class="w-8 h-8 rounded-lg">
            <h1 class="text-lg font-bold text-gray-800">Capture Signal</h1>
        </header>

        <!-- Project Selection -->
        <div>
            <label for="project-select" class="block text-sm font-medium text-gray-700 mb-1">Select Project</label>
            <select id="project-select" class="w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                <!-- Options will be dynamically populated by popup.js -->
                <option>Loading projects...</option>
            </select>
        </div>

        <!-- Notes Section -->
        <div>
            <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Add a Note</label>
            <textarea id="notes" rows="4" class="w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Why is this signal interesting? What's the insight?"></textarea>
        </div>

        <!-- Action Button -->
        <button id="save-button" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300">
            Save to Engine
        </button>

        <!-- Status Message Area -->
        <div id="status-message" class="text-center text-sm font-medium"></div>
    </div>

    <!-- The JavaScript file that contains all the logic -->
    <script src="popup.js"></script>
</body>
</html>
```javascript
// popup.js
// This script contains all the logic for our extension's popup window.

document.addEventListener('DOMContentLoaded', () => {
    const projectSelect = document.getElementById('project-select');
    const notesTextarea = document.getElementById('notes');
    const saveButton = document.getElementById('save-button');
    const statusMessage = document.getElementById('status-message');

    // This is the URL of our Replit backend.
    // In a real application, this would be the deployed URL.
    const BACKEND_URL = 'https://your-replit-backend-url.replit.dev/api';
    
    // --- Mock Authentication and Project Loading ---
    // In a real build, we would get the user's auth token from Chrome's storage
    // and send it to the backend to get their specific projects.
    // For this lean POC, we will mock this data.
    const MOCK_USER_ID = 'user_12345'; // A placeholder user ID
    
    function loadProjects() {
        // Mocking the API call to fetch projects.
        // In a real build: fetch(`${BACKEND_URL}/projects`, { headers: { 'Authorization': `Bearer ${authToken}` } })
        const mockProjects = [
            { id: 'proj_abc', name: 'Client X - Brand Refresh' },
            { id: 'proj_def', name: 'Client Y - Social Campaign' },
            { id: 'proj_ghi', name: 'Internal - Mood Board' }
        ];
        
        projectSelect.innerHTML = ''; // Clear the "Loading..." text
        mockProjects.forEach(project => {
            const option = document.createElement('option');
            option.value = project.id;
            option.textContent = project.name;
            projectSelect.appendChild(option);
        });
    }

    // --- Save Signal Logic ---
    async function saveSignal() {
        // Disable the button and show a loading state
        saveButton.disabled = true;
        saveButton.textContent = 'Saving...';
        statusMessage.textContent = '';

        // 1. Get the current tab's URL
        let [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        if (!tab || !tab.url) {
            displayStatus('Could not get URL of the current tab.', 'error');
            return;
        }

        // 2. Get data from the form
        const signalData = {
            userId: MOCK_USER_ID,
            url: tab.url,
            projectId: projectSelect.value,
            note: notesTextarea.value.trim()
        };

        // 3. Send data to the backend
        try {
            // This is where we would send the data to our real Replit backend.
            // Since we don't have a live backend yet, we'll simulate the API call.
            console.log('Sending data to backend:', JSON.stringify(signalData, null, 2));
            
            // const response = await fetch(`${BACKEND_URL}/save_signal`, {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify(signalData)
            // });

            // if (!response.ok) {
            //     throw new Error('Network response was not ok.');
            // }

            // const result = await response.json();
            // console.log('Backend response:', result);
            
            // Simulate a successful API call
            await new Promise(resolve => setTimeout(resolve, 1000)); 

            displayStatus('Signal saved successfully!', 'success');
            
            // Close the popup after a short delay on success
            setTimeout(() => {
                window.close();
            }, 1500);

        } catch (error) {
            console.error('Error saving signal:', error);
            displayStatus('Failed to save signal. See console for details.', 'error');
        } finally {
            // Re-enable the button regardless of outcome
            saveButton.disabled = false;
            saveButton.textContent = 'Save to Engine';
        }
    }

    // --- Helper function to display status messages ---
    function displayStatus(message, type) {
        statusMessage.textContent = message;
        if (type === 'success') {
            statusMessage.className = 'text-center text-sm font-medium text-green-600';
        } else {
            statusMessage.className = 'text-center text-sm font-medium text-red-600';
        }
    }

    // --- Event Listeners ---
    saveButton.addEventListener('click', saveSignal);
    
    // Load projects when the popup is opened
    loadProjects();
});
```
// Note on Images:
// This build requires a few simple icons. Please create an "images" folder
// in the same directory as the other files and add the following:
// - icon16.png (16x16 pixels)
// - icon48.png (48x48 pixels)
// - icon128.png (128x128 pixels)
// You can use a simple placeholder or a custom logo for these.
