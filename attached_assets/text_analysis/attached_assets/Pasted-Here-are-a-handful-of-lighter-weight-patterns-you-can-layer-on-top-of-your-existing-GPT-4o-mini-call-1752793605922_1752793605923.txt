Here are a handful of lighter‑weight patterns you can layer on top of your existing GPT‑4o‑mini calls to hit that 3–5‑sentence target without massive refactors or big cost/latency hits:

---

## 1. “Sentence‑Arrays” Instead of Free‑Text Blocks

**How it works:**

* In your JSON schema, have each descriptive field be an **array** of sentences:

  ```jsonc
  "truthAnalysis": {
    "fact": ["Sentence one.", "Sentence two.", "Sentence three."],
    …
  }
  ```
* In your prompt, say:

  > “Return each text field as a JSON array of exactly 4 sentences.”
* **Benefit:** The model can’t lie about count—you simply read `array.length === 4` client‑side and join with spaces for display.
* **Drawback Mitigated:** No external retries or cost; parsing is trivial.

---

## 2. Inline Self‑Check & Correction Step

**How it works:**

* In your single prompt, tack on a tiny “**Self‑Audit**” instruction at the end:

  > “After generating each field, **count your sentences**. If any field has fewer than 3 or more than 5, **regenerate that field only** before returning final JSON.”
* **Benefit:** You get on‑the‑fly corrections in the same call—no second API hit.
* **Drawback Mitigated:** Avoids extra calls & orchestration complexity.

---

## 3. Prompt‑Chaining with a Mini‑Editor Model

**How it works:**

1. First call: ask for the JSON with normal instructions (no sentence‑count enforcement).
2. Immediately feed that JSON back as user content to GPT‑4o‑mini with system message:

   > “Here is your previous output. For each field under `truthAnalysis`, ensure it has 3–5 sentences—edit in place without changing meaning.”
3. You still only pay for two calls, but the second is very fast (editing its own text).

* **Benefit:** Keeps core logic unchanged; you get precise control over length.
* **Drawback Mitigated:** Limited extra cost, but avoids full‑rewrite to function calls.

---

## 4. Lightweight “Template Expansion”

**How it works:**

* Provide a **fill‑in‑the‑blanks template** for each field, e.g.:

  ```
  fact = "<S1> <S2> <S3> <S4>"
  observation = "<O1> <O2> <O3> <O4>"
  ```
* Then ask GPT to replace each `<S#>` with one sentence.
* **Benefit:** Guarantees exactly N slots; very easy to parse.
* **Drawback Mitigated:** No post‑parse validation needed.

---

## 5. Mix GPT‑3.5 for Structure, GPT‑4o‑mini for Depth

**How it works:**

* Send a **very cheap GPT‑3.5‑turbo** call first to generate the shell of your JSON (with placeholders for sentences).
* Then on that narrower “fill the placeholders” prompt, call GPT‑4o‑mini to write 4 sentences per placeholder.
* **Benefit:** Each model does only what it’s best at—GPT‑3.5 structures, GPT‑4o‑mini writes high‑quality text.
* **Drawback Mitigated:** Minimizes your expensive model time and keeps latency low.

---

### Putting It All Together

A **lean combo** might be:

1. **Array Approach** + **Inline Self‑Check**:

   ```js
   system: “Return each field as an array of 4 sentences. After writing, count and correct any field that isn’t exactly 4 sentences.”  
   user: “Analyze this content…”  
   ```
2. **Parse & Join** client‑side, no retries, no extra calls.

This pattern gives you near‑100% compliance, almost zero extra cost or complexity, and you avoid ripping out your whole service to adopt function‑calling. Give it a spin!
