I pulled down just your “Core Code Files” slice and homed in on the Truth Analysis flow. Here’s what’s going wrong and how to fix it:

---

## 1. Malformed JSON‐Schema Prompt

In **`server/services/openai.ts`**, your prompt template defines the `"truthAnalysis"` object literally with placeholder strings:

```ts
"truthAnalysis": {
  "fact":           "What happened - ${lengthPreference ...}",
  "observation":    "Patterns & context - ${lengthPreference ...}",
  "insight":        "Why this is happening - ${lengthPreference ...}",
  "humanTruth":     "Deep psychological driver - ${lengthPreference ...}",
  "culturalMoment": "Larger cultural shift - ${lengthPreference ...}",
  "attentionValue": "high/medium/low",
  "platform":       "Platform context",
  "cohortOpportunities": ["specific cohort names"]
},
```

* **Nothing is ever interpolated** because you’ve embedded `${…}` inside a quoted string in a back‐tick prompt, but you never wrap the entire JSON schema in backticks or use the correct `${condition ? a : b}` syntax.
* **Result:** The model sees literal text like `"${lengthPreference…}"` instead of real instructions or content, so it never spits back real facts/insights.

**▶ Fix:** Build your prompt as one big template literal. For example:

```ts
const prompt = `
Analyze the following content with a Truth Analysis in ${lengthPreference} format:
————
${data.content}
————

Return strictly valid JSON following this schema:

{
  "truthAnalysis": {
    "fact": "...1–2 sentences...",
    "observation": "...1–2 sentences...",
    "insight": "...1–2 sentences...",
    "humanTruth": "...1–2 sentences...",
    "culturalMoment": "...1–2 sentences...",
    "attentionValue": "high" | "medium" | "low",
    "platform": "<platform name>",
    "cohortOpportunities": ["...","..."]
  },
  "cohortSuggestions": ["...","..."], 
  "viralPotential": "high"| "medium"| "low",
  "competitiveInsights": ["...","..."],
  "strategicInsights": ["...","..."],
  "strategicActions": ["...","..."]
}
`;
```

Then parse the model’s response (`JSON.parse(response.text)`) directly into your `truthAnalysis` object instead of trying to hand‑craft placeholder values.

---

## 2. `combineChunkResults` Scope Bug

Later you do:

```ts
const combinedResult = this.combineChunkResults(chunkResults, data);
return combinedResult;
```

But inside your `combineChunkResults(...)` method you reference a `combinedTruthAnalysis` that was defined *outside* its body (in the parent function). That leads to a `ReferenceError` and causes `truthAnalysis` to be `undefined` at runtime.

**▶ Fix:** Move the logic that builds and returns the merged `TruthAnalysis` entirely *into* `combineChunkResults`. For example:

```ts
private combineChunkResults(chunks: EnhancedAnalysisResult[]): EnhancedAnalysisResult {
  const truthPieces = chunks.map(c => c.truthAnalysis);

  const combinedTruth: TruthAnalysis = {
    fact:            truthPieces.map(t => t.fact).join(' '),
    observation:     truthPieces.map(t => t.observation).join(' '),
    insight:         truthPieces.map(t => t.insight).join(' '),
    humanTruth:      truthPieces.map(t => t.humanTruth).join(' '),
    culturalMoment:  truthPieces.map(t => t.culturalMoment).join(' '),
    attentionValue:  /* derive high/medium/low */,
    platform:        truthPieces[0].platform,
    cohortOpportunities: Array.from(new Set(truthPieces.flatMap(t => t.cohortOpportunities))).slice(0,5),
  };

  return {
    ...chunks[0],                   // carry over summary, sentiment, etc.
    truthAnalysis: combinedTruth,
    // merge the rest (cohortSuggestions, strategicInsights, etc.)
  };
}
```

---

## 3. Front‑End Crash & Empty UI

In **`EnhancedAnalysisResults.tsx`** you do:

```jsx
<p>{currentAnalysis.truthAnalysis.fact}</p>
```

But if `truthAnalysis` is missing or its fields are empty, this will either crash (if `truthAnalysis` is `undefined`) or render a blank card, leaving testers wondering what happened.

**▶ Fix:** Guard and show a fallback:

```tsx
{data.truthAnalysis ? (
  <>
    <p>{data.truthAnalysis.fact}</p>
    <p>{data.truthAnalysis.observation}</p>
    {/* … */}
  </>
) : (
  <p className="italic text-gray-500">
    Truth Analysis unavailable–please retry with more context.
  </p>
)}
```

---

### In Summary

1. **Rebuild your prompt** as one cohesive, valid JSON‑schema template literal so GPT actually returns structured `truthAnalysis` data.
2. **Relocate** the merging logic for `truthAnalysis` into `combineChunkResults` so that `combinedTruthAnalysis` is always in scope.
3. **Harden your React UI** with guards and fallback messaging for missing/empty analysis.

After those changes, your Truth Analysis tab will reliably show the facts, observations, insights, human truths, and cultural moments you intended—no more blank screens or literal `${lengthPreference}` strings.
