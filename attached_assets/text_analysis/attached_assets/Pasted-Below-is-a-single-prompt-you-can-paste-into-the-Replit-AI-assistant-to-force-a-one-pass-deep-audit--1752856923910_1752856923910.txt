Below is a single prompt you can paste into the Replit AI assistant to force a one‑pass, deep audit of your entire codebase—front end, back end, database schema, migrations, feature pipelines, and even performance bottlenecks. It tells the agent exactly what to look for and how to report, so you won’t need to iterate multiple times:

```
Perform a full end‑to‑end static analysis of this repository and produce a file‑by‑file report of EVERY issue, broken logic, missing import or file, schema mismatch, routing error, data‑flow bug, and performance anti‑pattern. Include line numbers, concise descriptions, and, where applicable, optimization suggestions. Cover at minimum:

1. **Database & Schema**  
   - Check `shared/schema.ts`, Drizzle schema, migration files for missing tables/columns, mismatched types (snake_case vs camelCase), JSONB vs text fields.  
   - Verify `drizzle.config.ts`, `migrations/`, and `scripts/seed.ts` exist and apply cleanly.

2. **Backend Initialization & Middleware**  
   - Inspect `server/index.ts` for correct `helmet()`, `cors()`, `express-session` usage (secure cookies, secret management).  
   - Ensure error‑handler middleware, `/healthz` and `/metrics` endpoints, and DB connection pooling are in place.

3. **API Routes & Services**  
   - In `server/routes.ts`, confirm every route handler is correctly imported and wired (no `ReferenceError`).  
   - In `server/services/openai.ts`, check your prompt templates (no literal `${…}`), single vs chunked calls, `combineChunkResults` scope, and caching.

4. **Storage Layer & Transactions**  
   - Audit `server/storage.ts` for garbled imports, duplicate field mappings, missing transactions on multi‑table writes, and unpooled DB client.  
   - Report any missing `INSERT`, `SELECT`, `UPDATE`, `DELETE` patterns or error‑handling gaps.

5. **Frontend Code & Routing**  
   - In `client/src`, verify `<BrowserRouter>`/`<Routes>` exist, every page has `isLoading`/`isError` guards, and large components are lazy‑loaded.  
   - Check for unpaginated lists (Signals, Trends) and un‑memoized re‑renders causing jank.

6. **Feature Pipelines & Connections**  
   - Trace data flow: Capture → `/api/capture` → OpenAI analysis → DB persist → Dashboard → Brief Builder.  
   - Confirm the Chrome Extension’s background, content, and popup scripts talk to the correct endpoints, handle retries, and use scoped permissions.

7. **Critical Errors & Missing Artifacts**  
   - Identify missing CI/CD configs (`.github/workflows/ci.yml`), tests (`__tests__`), Dockerfiles, and Replit scripts (`.replit`, `replit.nix`, `bootstrap.sh`).  
   - Flag any front/back mismatch (e.g. API URL typos, CORS failures).

8. **Performance & Optimization**  
   - Spot multiple synchronous OpenAI calls, missing caching layers, global middleware overhead, unpooled DB connections, and large first‑load bundles.  
   - Suggest moving security headers to edge/CDN, using Redis/LRU caches, connection pools, and code splitting.

Your output should look like:

```

server/services/openai.ts\:L120‑L135
• Prompt template not using backticks—`${lengthPref}` is sent literally.
• combineChunkResults references undefined `combinedTruthAnalysis`.
• Calls GPT‑4o‑mini per chunk sequentially—8–12 s latency. Suggest single function‑call with sentence‑arrays + caching.

client/src/components/SignalList.tsx\:L45‑L60
• Renders all signals at once—UI freezes at 200+ items. Recommend pagination or infinite scroll.

shared/schema.ts\:L10‑L17
• `cohortOpportunities` used in code but not declared as JSONB column. Schema mismatch.

````

Do not omit any area—scan **all** folders: `server/`, `client/`, `shared/`, `chrome-extension/`, migrations, scripts, and config files. Return only the structured report.```
::contentReference[oaicite:0]{index=0}
````
