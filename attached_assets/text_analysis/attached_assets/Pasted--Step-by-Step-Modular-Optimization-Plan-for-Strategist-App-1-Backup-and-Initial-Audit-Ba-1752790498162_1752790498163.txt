# Step-by-Step Modular Optimization Plan for Strategist-App

## 1. **Backup and Initial Audit**
- Backup your codebase and database.
- List all current features (truth analysis, cohorts, competitive insights, dashboards, etc.).

---

## 2. **Identify Core vs Advanced Features**
- **Core:** Truth analysis, content submission, signals dashboard, user auth.
- **Advanced:** Cohort builder, competitive intelligence, analytics, export tools, etc.
- Mark all advanced features for modularization (not removal).

---

## 3. **Backend Modularization**
- Move each advanced feature into its own service/module/file (e.g., `services/cohortBuilder.ts`, `services/competitiveIntelligence.ts`).
- Only load/execute advanced features when directly requested (not as part of every request).
- Keep core analysis API (`POST /api/analyze`) as fast and simple as possible.

```typescript name=server/services/cohortBuilder.ts
// Example: Modularized Cohort Builder Service
export async function getCohortSuggestions(content: string) {
  // Use cache and concise prompt
  // Only run when explicitly requested by frontend
  // Integrate OpenAI or your ML logic here
}
```

---

## 4. **Optimize OpenAI & External API Calls**
- Add caching (in-memory/Redis) per content+type for all AI analysis results.
- Use concise, clear prompts for each AI feature.
- For heavy/optional features, run analysis in the background and notify users when ready rather than blocking the main flow.
- Implement exponential backoff and error handling for all API calls.

```typescript name=server/services/openai.ts
import { createHash } from 'crypto';
const cache = new Map<string, any>();

function getCacheKey(content: string, type: string) {
  return createHash('sha256').update(content + type).digest('hex');
}

export async function analyzeTruth(content: string, type = 'default') {
  const input = content.slice(0, 2000);
  const key = getCacheKey(input, type);
  if (cache.has(key)) return cache.get(key);

  // ... OpenAI call logic ...

  cache.set(key, result);
  return result;
}
```

---

## 5. **Frontend Modularization**
- Split each advanced feature into a lazily loaded React component or page (e.g., `CohortBuilder`, `CompetitiveInsights`).
- The main dashboard should only load core truth analysis and signals by default.
- Use code-splitting (`React.lazy`, dynamic imports) so advanced features only load when accessed.
- Add clear loading/error states to each module.

```tsx name=client/src/components/LazyCohortBuilder.tsx
import React, { Suspense } from "react";
const CohortBuilder = React.lazy(() => import("./CohortBuilderImpl"));
export default function LazyCohortBuilder(props) {
  return (
    <Suspense fallback={<div>Loading Cohort Builder...</div>}>
      <CohortBuilder {...props} />
    </Suspense>
  );
}
```

---

## 6. **State Management & Hooks**
- Move feature-specific state/hooks into their module/component (avoid giant global state).
- Share only minimal user/session/context between modules.

```tsx name=client/src/context/UserContext.tsx
// Example: Minimal Context for user/session info only
import { createContext, useContext } from "react";
export const UserContext = createContext(null);
export const useUser = () => useContext(UserContext);
```

---

## 7. **Database & Schema**
- Keep tables for all features, but only JOIN/fetch related data when the relevant module is loaded.
- For seldom-used analytics, store results in a separate table, not in the main signals table.

```sql name=database/schema.sql
-- Example: Separate table for cohort results
CREATE TABLE cohort_analysis (
  id SERIAL PRIMARY KEY,
  signal_id INT REFERENCES signals(id),
  result JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);
```

---

## 8. **Testing and Error Boundaries**
- Wrap each advanced/lazy module in a React Error Boundary.
- Add backend try/catch and user-friendly error responses for every feature API.

```tsx name=client/src/components/ErrorBoundary.tsx
import React from "react";
class ErrorBoundary extends React.Component {
  state = { hasError: false };
  static getDerivedStateFromError() { return { hasError: true }; }
  render() {
    if (this.state.hasError) return <div>Something went wrong.</div>;
    return this.props.children;
  }
}
export default ErrorBoundary;
```

---

## 9. **Performance & Monitoring**
- Add monitoring for API response times, cache hits/misses, and error rates.
- Set up alerts for any endpoint or module that exceeds a latency/error threshold.

```typescript name=server/services/monitoring.ts
let recentAnalysisTimes: number[] = [];
export function logAnalysisDuration(ms: number) {
  recentAnalysisTimes.push(ms);
  if (recentAnalysisTimes.length > 100) recentAnalysisTimes.shift();
  if (ms > 10000) {
    // Add alerting logic here, e.g. send email or webhook
    console.warn("Analysis took over 10s!", ms);
  }
}
export function getAvgAnalysisTime() {
  return recentAnalysisTimes.reduce((a,b) => a+b, 0) / (recentAnalysisTimes.length || 1);
}
```

---

## 10. **Documentation and Code Comments**
- Document which features are core and which are modular.
- Clearly label modules/files as “core” or “advanced/optional”.
