When you give the model a single, giant “do everything” prompt like that, it’s easy for it to slip up on those exact sentence‑counts. Here’s a more robust recipe to enforce “3–5 sentences” every time:

---

### 1. Switch to Function‑Calling with a Strict JSON Schema

Let OpenAI enforce your schema for you:

```js
const functions = [{
  name: "analyzeContent",
  description: "Returns a full strategic analysis in JSON",
  parameters: {
    type: "object",
    properties: {
      summary: { type: "string", description: "3–5 sentences" },
      sentiment: { type: "string", enum: ["positive","negative","neutral"] },
      tone: { type: "string", enum: ["professional","casual","urgent","analytical"] },
      keywords: { type: "array", items: { type: "string" } },
      confidence: { type: "string" },
      truthAnalysis: {
        type: "object",
        properties: {
          fact: { type: "string", description: "3–5 sentences" },
          observation: { type: "string", description: "3–5 sentences" },
          insight: { type: "string", description: "3–5 sentences" },
          humanTruth: { type: "string", description: "3–5 sentences" },
          culturalMoment: { type: "string", description: "3–5 sentences" },
          attentionValue: { type: "string", enum: ["high","medium","low"] },
          platform: { type: "string" },
          cohortOpportunities: { type: "array", items: { type: "string" } }
        },
        required: ["fact","observation","insight","humanTruth","culturalMoment","attentionValue","platform","cohortOpportunities"]
      },
      cohortSuggestions: { type: "array", items: { type: "string" } },
      platformContext: { type: "string", description: "3–5 sentences" },
      viralPotential: { type: "string", enum: ["high","medium","low"] },
      competitiveInsights: { type: "array", items: { type: "string" } },
      strategicInsights: { type: "array", items: { type: "string" } },
      strategicActions: { type: "array", items: { type: "string" } }
    },
    required: ["summary","sentiment","tone","keywords","confidence","truthAnalysis","cohortSuggestions","platformContext","viralPotential","competitiveInsights","strategicInsights","strategicActions"]
  }
}];

const res = await openai.chat.completions.create({
  model: "gpt-4o-mini",
  messages: [
    { role: "system", content: "You are a concise strategic analyst. Always obey JSON schema exactly." },
    { role: "user", content: `Analyze this: Title: … Content: … URL: …` }
  ],
  functions,
  function_call: { name: "analyzeContent" },
  temperature: 0
});

// parse JSON from res.choices[0].message.function_call.arguments
```

**Why it helps:** the model must return exactly the properties you declared, and the schema descriptions remind it which fields need 3–5 sentences.

---

### 2. Provide 1–2 Few‑Shot Examples

Include one or two perfect examples so it “sees” exactly 3–5 sentences in each field:

```js
const example = {
  role: "system",  
  content: `
Example Input:
  Content: "Our user base grew by 30% but churn remains at 15%..."
Example Output (JSON):
  {
    "summary": "Over the past quarter, user growth accelerated by 30%, yet churn remained a stubborn 15%. This disconnect indicates acquisition outpaced retention efforts. The business must pivot to strengthen onboarding and support. User satisfaction surveys show a dip in perceived value post‑signup. A balanced growth‑retention strategy is necessary.",
    "sentiment": "neutral",
    /* …and so on for every field, each exactly 3–5 sentences… */
  }
`
};
```

Then feed those as additional messages before your user prompt. Few‑shot examples dramatically increase compliance.

---

### 3. Post‑Parse Validation & Auto‑Retry

After you parse the JSON, count sentences in each field. If any field has fewer than 3 or more than 5 periods (rough proxy for sentences), automatically re‑prompt:

```js
function countSentences(text) {
  return (text.match(/\./g) || []).length;
}

for (let field of ["summary","truthAnalysis.fact",…]) {
  const txt = getNested(analysis, field);
  const cnt = countSentences(txt);
  if (cnt < 3 || cnt > 5) {
    // retry just that field:
    await openai.chat.completions.create({
      /* short prompt: "Please rewrite <field> in exactly 3–5 sentences" */
    });
  }
}
```

This “belt and suspenders” approach ensures you catch any slip‑ups without user noticing.

---

### 4. Use a Hard Stop Token for Each Field

If you embed each field in its own mini‑prompt with a unique end‑marker, you can ensure it doesn’t bleed into adjacent fields:

```
"fact": "<BEGIN_FACT> …exactly 3–5 sentences… <END_FACT>"
```

Then post‑process by striping out the `<BEGIN_FACT>` and `<END_FACT>`. That helps when the model wanders off.

---

By combining **function‑calling**, **few‑shot anchoring**, **post‑parse validation**, and **field‑level hard stops**, you’ll get bullet‑proof 3–5 sentence outputs every time—even on GPT‑4o‑mini.
