Got it — those TS2307 errors mean the @shared alias isn’t resolving in your current workspace. Let’s fix it cleanly (and make it future-proof).

I’ll write this as a single set of instructions for your Replit agent to execute exactly.

⸻

Replit Agent – Fix @shared/database.types Resolution

Goal: Ensure imports like @shared/database.types resolve from client/* code without changing import lines.

1) Verify the types file exists
	•	Check for shared/database.types.ts in the repo root.
	•	If missing, create it (use the latest version you generated earlier — the one that includes users, captures, cultural_moments, dsd_briefs, projects, user_feeds, etc.).
	•	If both shared/database.types.ts and client/src/types/supabase.generated.ts exist, keep shared/database.types.ts as the single source of truth.

2) Wire up TS path aliases in all tsconfigs that matter
	•	Find all tsconfig files:
	•	tsconfig.json (root)
	•	client/tsconfig.json
	•	If present: client/tsconfig.app.json, client/tsconfig.node.json
	•	For each one that exists, ensure these settings:

Root tsconfig.json (create or merge keys if needed):

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@shared/*": ["shared/*"],
      "@shared/database.types": ["shared/database.types.ts"]
    }
  },
  "include": ["client", "server", "shared", "scripts"]
}

client/tsconfig.json (make sure it extends root or repeats the mapping):

{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    // Keep anything client-specific here, but DO NOT remove the alias provided by the root.
  },
  "include": ["src", "../shared"]
}

If client/tsconfig.app.json / client/tsconfig.node.json exist, add:

{
  "compilerOptions": {
    "baseUrl": "..",
    "paths": {
      "@shared/*": ["../shared/*"],
      "@shared/database.types": ["../shared/database.types.ts"]
    }
  }
}

(Adjust baseUrl only if these tsconfigs don’t extend the root.)

3) Vite alias (used at runtime/build)
	•	Open vite.config.ts at repo root (where it already lives).
	•	Ensure the alias points to the root’s shared folder:

import { defineConfig } from "vite";
import path from "path";

export default defineConfig({
  // ...keep existing config...
  resolve: {
    alias: {
      "@shared": path.resolve(__dirname, "shared"),
    },
  },
});

Note: This is correct because your Vite config is at the repo root and shared/ is also at the repo root. If your Vite config ever moves under client/, change it to path.resolve(__dirname, "../shared").

4) (Optional) ESLint import resolver (just for editor lint happiness)

If you have an ESLint config (e.g., .eslintrc.cjs or .eslintrc.js), add:

settings: {
  "import/resolver": {
    typescript: {
      project: ["./tsconfig.json", "./client/tsconfig.json"]
    },
    alias: {
      map: [
        ["@shared", "./shared"]
      ],
      extensions: [".ts", ".tsx", ".js", ".jsx", ".json"]
    }
  }
}

5) Quick fallback (only if alias still doesn’t resolve)

Do not change import lines yet. If TypeScript still can’t resolve after steps 1–4, run:
	•	npx tsc --showConfig inside the client/ folder and verify the paths mapping is effective.
	•	If Replit uses a different working directory, ensure it runs tsc from repo root so it picks up the root tsconfig (or ensure client tsconfig extends the root as shown above).

6) Verify

Run:
	•	npm run typecheck (alias for tsc --noEmit)
	•	npm run build

You should see:
	•	No more TS2307: Cannot find module '@shared/database.types'
	•	Build passes

⸻

Why this fixes it
	•	The path alias must be known to TypeScript (tsconfig paths) and to Vite (runtime bundler resolve.alias).
	•	Because your code files live under client/src/**, we ensure the client tsconfig sees the root mapping (by extending it) and includes ../shared.
	•	We keep shared/database.types.ts as the single canonical types file to avoid drift.

If anything still complains after this, tell me the exact tsconfig tree (paths and extends) it’s using and the vite.config.ts location, and I’ll adjust the alias path accordingly.