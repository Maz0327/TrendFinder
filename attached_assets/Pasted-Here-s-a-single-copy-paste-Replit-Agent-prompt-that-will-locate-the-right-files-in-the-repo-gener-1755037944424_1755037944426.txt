Here‚Äôs a single, copy-paste Replit Agent prompt that will: locate the right files in the repo, generate a clean ‚ÄúLovable Backend Interface Pack‚Äù, add a one-page contract doc, sanitize secrets, and bundle everything into a ZIP you can hand to Lovable (or anyone) to build the UI against your backend without breaking it.

‚∏ª

üõ†Ô∏è Replit Task ‚Äî Build & Zip ‚ÄúLovable Backend Interface Pack‚Äù

Goal: Create a handoff folder with all the frontend/backend integration artifacts (types, Supabase client, contexts, services, hooks, routing shell, env example, docs), then package it as a single ZIP for UI dev. Do not alter the backend or app logic.

0) Preconditions
	‚Ä¢	Work in the repo root (project already cloned).
	‚Ä¢	Assume Vite + React + Supabase structure with client/ and shared/.

1) Detect structure & set variables
	1.	Run these checks and echo the chosen paths:
	‚Ä¢	Prefer shared/database.types.ts for DB types; fall back to client/src/types/supabase.generated.ts if missing.
	‚Ä¢	Supabase client at client/src/integrations/supabase/client.ts.
	‚Ä¢	Auth components:
client/src/components/auth/AuthCallback.tsx,
client/src/components/auth/RequireAuth.tsx (or client/src/components/auth/RequireAuth.tsx).
	‚Ä¢	Contexts:
client/src/context/AuthContext.tsx,
client/src/context/ProjectContext.tsx (if exists).
	‚Ä¢	Services (copy only those that exist):
client/src/services/projects.ts, client/src/services/feeds.ts, client/src/services/captures.ts, client/src/services/moments.ts, client/src/services/briefs.ts, client/src/services/supabase-realtime.ts.
	‚Ä¢	Hooks (copy only those that exist):
client/src/hooks/useProjects.ts, client/src/hooks/useUserFeeds.ts, client/src/hooks/useCaptures.ts, client/src/hooks/useMoments.ts, client/src/hooks/useBriefs.ts.
	‚Ä¢	Shell & flags:
client/src/App.tsx, client/src/main.tsx, client/src/flags.ts.
	‚Ä¢	Example pages (copy only if present):
client/src/pages/feeds.tsx, client/src/pages/captures-inbox.tsx, client/src/pages/moments-radar.tsx, client/src/pages/brief-builder-v2.tsx.
	‚Ä¢	Env example (or create): .env.example.
	‚Ä¢	Optional schema: supabase/schema.sql or /schema.sql (if present).

2) Create handoff folder & sub-structure
	‚Ä¢	Create handoff/lovable-interface-pack/ with these subfolders:

handoff/lovable-interface-pack/
  docs/
  shared/
  client/src/integrations/supabase/
  client/src/context/
  client/src/components/auth/
  client/src/services/
  client/src/hooks/
  client/src/pages/
  client/src/



3) Copy files into the pack
	‚Ä¢	Copy only files that exist (don‚Äôt fail if some are absent). Preserve filenames, but we don‚Äôt need to preserve original parent folders beyond what‚Äôs created above.

Files to copy if they exist:
	‚Ä¢	shared/database.types.ts (or fallback) ‚Üí handoff/lovable-interface-pack/shared/database.types.ts
	‚Ä¢	client/src/integrations/supabase/client.ts ‚Üí same path under handoff
	‚Ä¢	client/src/context/AuthContext.tsx, client/src/context/ProjectContext.tsx
	‚Ä¢	client/src/components/auth/AuthCallback.tsx, client/src/components/auth/RequireAuth.tsx
	‚Ä¢	Services (only those present): projects.ts, feeds.ts, captures.ts, moments.ts, briefs.ts, supabase-realtime.ts
	‚Ä¢	Hooks (only those present): useProjects.ts, useUserFeeds.ts, useCaptures.ts, useMoments.ts, useBriefs.ts
	‚Ä¢	Shell + flags: client/src/App.tsx, client/src/main.tsx, client/src/flags.ts
	‚Ä¢	Example pages (if present): feeds.tsx, captures-inbox.tsx, moments-radar.tsx, brief-builder-v2.tsx
	‚Ä¢	Env example: .env.example
	‚Ä¢	Optional schema: supabase/schema.sql or /schema.sql ‚Üí handoff/lovable-interface-pack/supabase/schema.sql

If any expected file is missing, create a tiny placeholder that exports nothing but includes a comment like:

// Placeholder created for handoff. Original file not found in repo at time of packaging.
export {};

4) Generate docs (contract + readme)
	1.	Create handoff/lovable-interface-pack/docs/FRONTEND_CONTRACT.md with exact content below:

# FRONTEND CONTRACT (UI Integration Guide)

This doc defines how the new UI MUST integrate with the existing backend.

## 1) Environment & Config
- Use these env vars (Vite):
  - `VITE_SITE_URL` ‚Äì absolute origin of the frontend (e.g., https://yourapp.tld)
  - `VITE_SUPABASE_URL` ‚Äì Supabase project URL
  - `VITE_SUPABASE_ANON_KEY` ‚Äì Supabase anon key
- DO NOT hardcode URLs or keys. UI must read from env.

## 2) Auth Flow (Supabase)
- Use our initialized client: `import { supabase } from '@/integrations/supabase/client'`.
- Persist session + auto refresh are configured in that client. Do NOT create your own.
- Use `<AuthProvider>` and `useAuth()` (from `client/src/context/AuthContext.tsx`) as the only source of truth for auth state.
- OAuth redirect path: `${VITE_SITE_URL}/auth/callback` handled by `client/src/components/auth/AuthCallback.tsx`.
- Protect private routes via `client/src/components/auth/RequireAuth.tsx`.

## 3) Project Context
- Use `useProject()` from `client/src/context/ProjectContext.tsx` for the current project id.
- Do NOT invent your own project state via URL params. The provider is the contract.

## 4) Data Access Rules
- DO NOT call Supabase directly in pages or components.
- Only use our typed services in `client/src/services/*.ts` or the React Query hooks in `client/src/hooks/*`.
- All types MUST come from `@shared/database.types`.

## 5) Realtime
- If live updates are needed, use the helpers in `client/src/services/supabase-realtime.ts`.

## 6) Routing Shell
- Keep `/auth/callback` and `/login`.
- Mount all protected pages under `<RequireAuth>` in `client/src/App.tsx`.

## 7) Feature Flags
- Use `client/src/flags.ts` to gate Phase 5/6 pages. This avoids breaking current flows.

## 8) Styling Guardrails (Apple-inspired dark theme)
- Dark theme, high contrast, soft glass/translucency (backdrop-filter), subtle motion (hover/entrance).
- Components: rounded-2xl, gentle elevation, tasteful depth, generous spacing.
- Keep the UI elegant and calm; avoid heavy borders, loud colors, or clutter.

## 9) Do Not Change (Contract-critical)
- Function names and signatures exported from services and hooks.
- The Supabase client file path and its configuration.
- The `AuthProvider` / `ProjectProvider` contracts.
- Env variable names and their usage.

By following this contract, the UI can be redesigned without breaking the backend or data layer.

	2.	Create handoff/lovable-interface-pack/docs/README_FOR_UI_DEV.md:

# UI Handoff Pack ‚Äî How to Use

## What this pack includes
- Typed DB shapes: `shared/database.types.ts`
- Supabase client (preconfigured)
- Auth + Project contexts
- Services + Hooks (typed, the only data access points)
- Shell (`App.tsx`, `main.tsx`), flags, and sample pages
- Env example
- (Optional) schema.sql if present in repo

## How to integrate
1. Drop these folders into your UI codebase, preserving relative import paths:
   - `shared/`
   - `client/src/integrations/supabase/`
   - `client/src/context/`
   - `client/src/components/auth/`
   - `client/src/services/`
   - `client/src/hooks/`
   - `client/src/` (only the provided files)
2. Ensure the bundler resolves `@/` to `client/src` and `@shared` to `/shared`.
3. Set env variables from `.env.example`.
4. Build pages ONLY via hooks/services; do not talk to Supabase directly.
5. Keep `/auth/callback` and mount protected routes under `<RequireAuth>`.

Follow `FRONTEND_CONTRACT.md` strictly to avoid breaking integration.

5) Sanitize secrets
	‚Ä¢	Search within the handoff folder and remove any hardcoded keys or secrets if present (print any redactions).

6) Validate presence & print a tree
	‚Ä¢	Print a tree of handoff/lovable-interface-pack showing all files you copied/created.

7) Zip it
	‚Ä¢	Create: lovable_backend_interface_pack_$(date +%Y%m%d_%H%M%S).zip at repo root containing handoff/lovable-interface-pack/ (preserve folder structure).
	‚Ä¢	After zipping, echo the absolute path and file size.
	‚Ä¢	Also echo ‚Äú‚úÖ Handoff ZIP ready‚Äù and the list of top-level items inside the zip (zipinfo -1 if available; otherwise unzip -l).

8) (Optional) Commit to a branch
	‚Ä¢	Create a branch handoff/lover-pack, add handoff/ and the zip, commit, and push. If pushing is not desired, skip.

9) Final output
	‚Ä¢	Show:
	‚Ä¢	Chosen source paths and which ones were missing (and got placeholders)
	‚Ä¢	The tree of the handoff folder
	‚Ä¢	The zip path + size
	‚Ä¢	Any warnings (e.g., missing optional files)
	‚Ä¢	Do not start the dev server; this task is packaging only.

End of task.