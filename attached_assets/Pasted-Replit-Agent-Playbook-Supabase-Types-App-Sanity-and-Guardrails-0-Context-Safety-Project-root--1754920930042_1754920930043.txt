Replit Agent Playbook â€” Supabase Types, App Sanity, and Guardrails
0) Context & Safety
Project root is the current working directory.

Do not modify supabase/migrations unless asked.

If any step fails, stop and print the error and the last command run.

1) Generate fresh Supabase types
Shell:

bash
Copy
Edit
# Ensure deps are installed
npm i

# Generate Typescript types from the public schema into src/types/supabase.generated.ts
npx supabase gen types typescript --project-id $VITE_SUPABASE_PROJECT_REF --schema public > src/types/supabase.generated.ts
If the env var VITE_SUPABASE_PROJECT_REF is missing, stop and print:

Missing VITE_SUPABASE_PROJECT_REF. Please set it in Replit Secrets to your Supabase project ref (e.g., abcdefgh).

2) Update imports to the new types file
Action:

Find all files importing the old types file (any of):

@/types/supabase

./types/supabase

src/types/supabase

Replace those imports with:

ts
Copy
Edit
import type { Database } from "@/types/supabase.generated";
Implementation detail:

Perform a project-wide search & replace.

Skip files already importing supabase.generated.ts.

3) Verify required environment variables
Check these are present in Replit Secrets (do not echo their values):

Client:

VITE_SUPABASE_URL

VITE_SUPABASE_ANON_KEY

VITE_SUPABASE_PROJECT_REF

Server (if server code exists here):

SUPABASE_URL

SUPABASE_SERVICE_ROLE_KEY

If any are missing, stop and print which key is missing.

4) Create a tiny Node seed script (optional but recommended)
Create file: scripts/seed.ts with exactly this content:

ts
Copy
Edit
import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const url = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const key = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!url || !key) {
  console.error('Missing SUPABASE_URL or key (SERVICE_ROLE_KEY preferred). Aborting seed.');
  process.exit(1);
}

type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];

const supabase = createClient(url, key);

async function main() {
  // Insert a user if not exists
  const userId = '00000000-0000-0000-0000-000000000001';
  await supabase
    .from('users')
    .upsert({
      id: userId,
      email: 'seed-user@example.com',
      username: 'seed_user',
      role: 'tester',
      onboarding_completed: true,
      tour_completed: true,
      progress_data: {},
      google_tokens: {},
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    }, { onConflict: 'id' });

  // Insert sample captures
  const now = new Date().toISOString();
  await supabase.from('captures').insert([
    {
      id: '11111111-1111-1111-1111-111111111111',
      user_id: userId,
      title: 'Seed Capture A',
      content: 'Example content A',
      platform: 'twitter',
      url: 'https://example.com/a',
      tags: ['trend', 'seed'],
      viral_score: 42,
      ai_analysis: { summary: 'Looks promising' } as Json,
      dsd_tags: ['define'],
      dsd_section: 'DEFINE',
      predicted_virality: 0.61,
      actual_virality: 0.12,
      created_at: now,
      updated_at: now,
    },
    {
      id: '22222222-2222-2222-2222-222222222222',
      user_id: userId,
      title: 'Seed Capture B',
      content: 'Example content B',
      platform: 'reddit',
      url: 'https://example.com/b',
      tags: ['culture'],
      viral_score: 55,
      ai_analysis: { notes: ['interesting comment thread'] } as Json,
      dsd_tags: ['shift'],
      dsd_section: 'SHIFT',
      predicted_virality: 0.72,
      actual_virality: 0.33,
      created_at: now,
      updated_at: now,
    }
  ]).select('*');

  // Insert cultural moment
  await supabase.from('cultural_moments').insert({
    id: '33333333-3333-3333-3333-333333333333',
    title: 'Seed Cultural Moment',
    description: 'An example cultural spike',
    intensity: 7,
    platforms: ['tiktok', 'instagram'],
    demographics: ['Gen Z', 'Millennials'],
    duration: 'short',
    created_at: now,
    updated_at: now,
  });

  // Insert DSD brief
  await supabase.from('dsd_briefs').insert({
    id: '44444444-4444-4444-4444-444444444444',
    user_id: userId,
    client_profile_id: null,
    title: 'Seed DSD Brief',
    status: 'draft',
    define_section: { bullets: ['who are we serving?'] } as Json,
    shift_section: { angles: ['reframe problem'] } as Json,
    deliver_section: { outputs: ['IG hooks', 'TikTok edits'] } as Json,
    created_at: now,
    updated_at: now,
  });

  console.log('Seed completed.');
}

main().catch((e) => {
  console.error('Seed failed:', e);
  process.exit(1);
});
Shell:

bash
Copy
Edit
# Ensure deps for the seed script
npm i @supabase/supabase-js dotenv

# Run the seed (safe to re-run)
node scripts/seed.ts
If any table is missing (e.g., relation "public.dsd_briefs" does not exist), stop and print:

Expected table missing. Please confirm migrations were applied. Abort.

5) Lint ignores & guardrails
Add to .eslintignore (create if missing):

pgsql
Copy
Edit
src/types/supabase.generated.ts
Ensure the old types file is not referenced:

If src/types/supabase.ts exists, keep it but ensure no imports reference it.

If any imports still reference it after step 2, replace them now.

6) Build & type-check
Shell:

bash
Copy
Edit
npm run typecheck || npx tsc --noEmit
If errors occur, print them verbatim and stop.

Then run dev:

bash
Copy
Edit
npm run dev
Confirm the dev server starts. Do not expose secrets in logs.

7) Add a simple CI typecheck (GitHub Actions)
Create file: .github/workflows/typecheck.yml

yaml
Copy
Edit
name: TypeCheck

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  tsc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npx tsc --noEmit
Commit the workflow:

bash
Copy
Edit
git add .github/workflows/typecheck.yml
git commit -m "chore(ci): add tsc typecheck workflow"
git push
8) Report back
After executing all steps above:

Print:

Count of files updated for imports

Output of node scripts/seed.ts (success or error)

Result of npx tsc --noEmit (success or errors)

Dev server status (running/not running)

If any step failed, include:

The step number

The command run

The exact error output