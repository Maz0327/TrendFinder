Totally‚Äîlet‚Äôs have the Replit agent do all of it. Here‚Äôs a single ‚ÄúRunbook‚Äù you can paste into Replit Tasks. It includes automatic edits plus two short Human Stops for console settings.

‚∏ª

RUNBOOK: Wire Up Google OAuth Redirect (Supabase) End-to-End

Goal: Fix redirect_uri_mismatch, add an auth callback route, and ensure clean login ‚Üí return to app.

‚∏ª

0) Context checks (no changes yet)
	‚Ä¢	Detect paths:
	‚Ä¢	Prefer Supabase client at client/src/integrations/supabase/client.ts.
	‚Ä¢	Fallback: client/src/lib/supabaseClient.ts.
	‚Ä¢	Detect router file:
	‚Ä¢	Prefer routes in client/src/App.tsx.
	‚Ä¢	Fallback: client/src/main.tsx or client/src/router.tsx.
	‚Ä¢	Do not rename or move files outside what‚Äôs listed below.

If any of these are missing, report which one and pause.

‚∏ª

1) Add/confirm env var for site URL
	1.	Open .env (or create if missing).
	2.	Ensure this key exists (use the app‚Äôs public URL if known; otherwise leave localhost for dev):

VITE_SITE_URL=http://localhost:5173

If you already deploy on a public URL, set it here and in Supabase (next human step).

‚∏ª

2) Update the Google sign-in call to pass redirectTo
	1.	Locate the Google sign-in trigger (commonly in a login page, header, or AppLayout):
	‚Ä¢	Search for supabase.auth.signInWithOAuth({ provider: 'google' or similar.
	2.	Replace the call with this version (adjust the import path for your project as detected in step 0):

// Example: if client is at '@/integrations/supabase/client' ‚Äî otherwise use '@/lib/supabaseClient'
import { supabase } from '@/integrations/supabase/client';

export async function signInWithGoogle() {
  const baseUrl =
    (import.meta as any).env?.VITE_SITE_URL || window.location.origin;

  await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: {
      redirectTo: `${baseUrl}/auth/callback`,
      // optional but useful if we ever need Drive/Slides scopes in future
      queryParams: { access_type: 'offline', prompt: 'consent' }
    }
  });
}

	3.	If you currently use a <Link to="/login">Sign in</Link>, ensure there‚Äôs a button that calls signInWithGoogle().

	‚Ä¢	If there‚Äôs no dedicated login component, create client/src/pages/Login.tsx with a minimal button that calls signInWithGoogle() and add a route to it (see step 3 for routes update).

‚∏ª

3) Create the callback page and route
	1.	Create client/src/pages/AuthCallback.tsx with:

import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';

export default function AuthCallback() {
  const navigate = useNavigate();

  useEffect(() => {
    const { data } = supabase.auth.onAuthStateChange((_event, session) => {
      if (session) navigate('/', { replace: true });
    });

    // Safety timeout in case the event is slow
    const t = setTimeout(() => navigate('/', { replace: true }), 1500);

    return () => {
      data.subscription.unsubscribe();
      clearTimeout(t);
    };
  }, [navigate]);

  return (
    <div className="p-6 text-sm text-muted-foreground">
      Finishing Google sign-in‚Ä¶
    </div>
  );
}

	2.	Add a route for /auth/callback:
	‚Ä¢	If routes live in client/src/App.tsx, add:

import AuthCallback from '@/pages/AuthCallback';

// inside <Routes>‚Ä¶
<Route path="/auth/callback" element={<AuthCallback />} />

	‚Ä¢	If routes live in client/src/main.tsx or client/src/router.tsx, register the same route there.

	3.	If you created Login.tsx, also add:

import Login from '@/pages/Login';
<Route path="/login" element={<Login />} />


‚∏ª

4) Ensure Supabase client persists session & SSR-safe init

Open your Supabase client file (path from step 0). Confirm it‚Äôs created with createClient(VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY, { auth: { persistSession: true, autoRefreshToken: true } }). If not, update it:

import { createClient } from '@supabase/supabase-js';

const url = (import.meta as any).env?.VITE_SUPABASE_URL!;
const anon = (import.meta as any).env?.VITE_SUPABASE_ANON_KEY!;

export const supabase = createClient(url, anon, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  },
});

If your file already handles this correctly, skip.

‚∏ª

5) Typecheck & quick run
	‚Ä¢	Run:
	‚Ä¢	npm run typecheck (or npx tsc --noEmit)
	‚Ä¢	npm run dev (or your start command)

If errors occur, report them and pause.

‚∏ª

üö¶ HUMAN STEP A: Google Cloud Console ‚Äì Authorized redirect URI

In Google Cloud Console ‚Üí APIs & Services ‚Üí Credentials ‚Üí OAuth 2.0 Client IDs ‚Üí (your web client), add this Authorized redirect URI:

https://<YOUR_SUPABASE_PROJECT_REF>.supabase.co/auth/v1/callback

	‚Ä¢	This is the only redirect URI Google needs for Supabase OAuth.
	‚Ä¢	Save changes.

Reply ‚ÄúDONE A‚Äù when finished.

‚∏ª

üö¶ HUMAN STEP B: Supabase Auth URL (nice-to-have default)

In Supabase Dashboard ‚Üí Authentication ‚Üí URL Configuration:
	‚Ä¢	Set Site URL to match your app base URL (same as VITE_SITE_URL, e.g., http://localhost:5173 for local or your deployed URL).
	‚Ä¢	Save.

Reply ‚ÄúDONE B‚Äù when finished.

‚∏ª

6) Final verify
	1.	Restart dev server (to pick up .env changes).
	2.	Click Sign in with Google in the app.
	3.	Expected flow:
	‚Ä¢	Google consent ‚Üí returns to Supabase ‚Üí Supabase redirects to VITE_SITE_URL + /auth/callback ‚Üí your callback page ‚Üí auto-redirect into the app logged in.

If any 400/404 appears, copy the full error page URL (especially the redirect_uri= param and your current page origin) and pause with that info.

‚∏ª

7) Commit

If everything works:

git add -A
git commit -m "Auth: Google OAuth redirect flow wired (callback route, env, client config)"
git push


‚∏ª

Notes / Safety
	‚Ä¢	We aren‚Äôt changing any backend tables here‚Äîpurely auth wiring + a tiny page.
	‚Ä¢	If your app has both ‚Äúold UI‚Äù and ‚Äúnew UI‚Äù, ensure the login button exists somewhere visible in the current header or a /login page.

‚∏ª

Paste that in Replit Tasks, and it‚Äôll take it from there. If you hit a snag at any step, tell me which step number and what the agent reported‚ÄîI‚Äôll adjust fast.