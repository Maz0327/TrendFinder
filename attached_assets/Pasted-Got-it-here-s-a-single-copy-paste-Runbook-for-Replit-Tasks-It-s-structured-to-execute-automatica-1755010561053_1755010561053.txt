Got it‚Äîhere‚Äôs a single, copy-paste ‚ÄúRunbook‚Äù for Replit Tasks. It‚Äôs structured to execute automatically, and it pauses at clear HUMAN STOP checkpoints where I (the human) need to review/approve, provide tokens, or perform UI actions.

‚∏ª

üìò Replit Task Runbook ‚Äî Phase 5 Finish + Phase 6 Scaffold

Goal: finalize Phase 5 (end-to-end ‚Äúcaptures ‚Üí truth analysis ‚Üí pre-brief review ‚Üí export Google Slides‚Äù) and scaffold Phase 6 (cohorts, strategy studio, slide stage, job queue), without breaking existing functionality.

0) Setup & Safety
	1.	Create a working branch:

git fetch origin
git checkout -b phase5-finish-phase6-scaffold


	2.	Install dependencies (clean):

rm -rf node_modules package-lock.json
npm ci


	3.	Verify TypeScript/build are currently green:

npm run -s typecheck || true
npm run -s build || true



HUMAN STOP #1 ‚Äî Verify baseline
	‚Ä¢	Confirm no surprise errors from typecheck / build.
	‚Ä¢	If issues appear, pause; I‚Äôll decide whether to proceed or roll back.

‚∏ª

1) Env & Keys Check (no secrets printed)
	1.	Check required secrets exist (do not echo values):
	‚Ä¢	VITE_SUPABASE_URL
	‚Ä¢	VITE_SUPABASE_ANON_KEY
	‚Ä¢	OPENAI_API_KEY (for Truth Analysis)
	‚Ä¢	GOOGLE_API_KEY (for Slides discovery if used)
	‚Ä¢	GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET (OAuth)

node -e "['VITE_SUPABASE_URL','VITE_SUPABASE_ANON_KEY','OPENAI_API_KEY','GOOGLE_API_KEY','GOOGLE_CLIENT_ID','GOOGLE_CLIENT_SECRET'].forEach(k=>{if(!process.env[k]) console.error('MISSING',k)})"


	2.	Confirm ‚ÄúIntegrations‚Äù flow is present (UI page for Google auth tokens). If missing, create a simple page at client/src/pages/integrations.tsx that lets the user paste Google OAuth tokens to Supabase (uses existing service if present). No secrets shown here.

HUMAN STOP #2 ‚Äî Tokens & OAuth
	‚Ä¢	Confirm secrets are set.
	‚Ä¢	Confirm I can authenticate Google in-app (Integrations) for Slides access (or confirm token storage already exists).
	‚Ä¢	If OAuth not yet wired, stop and notify me.

‚∏ª

2) Wire ‚ÄúExport to Slides‚Äù in Brief Builder

Target page: client/src/pages/brief-builder-v2.tsx
Goal: Button to export a brief to Google Slides from selected captures + pre-brief review modal.
	1.	Add a light pre-brief review modal:
	‚Ä¢	Create client/src/components/briefs/PreBriefReview.tsx:
	‚Ä¢	Props: captures, onConfirm(), onCancel().
	‚Ä¢	Show slide outline (title per slide) and placeholder thumbnails (no real rendering yet).
	‚Ä¢	‚ÄúExport to Slides‚Äù ‚Üí calls onConfirm.
	2.	Add an ‚ÄúExport‚Äù button (top-right actions of Brief Builder):
	‚Ä¢	Button opens PreBriefReview.
	‚Ä¢	On confirm: call server export route with { captureIds, projectId, title, options }.
	‚Ä¢	Show toasts: ‚ÄúPreparing brief‚Ä¶‚Äù, ‚ÄúExported!‚Äù, or failure.
	3.	Client API helper: client/src/services/briefs.ts
	‚Ä¢	exportBriefToSlides({ captureIds, projectId, title }): Promise<{slidesUrl:string}>
	‚Ä¢	fetch('/api/google-exports/brief', {method:'POST', body: JSON.stringify(...)})
	4.	Server route (if missing): server/routes/google-exports.ts
	‚Ä¢	Add POST /api/google-exports/brief handler that:
	‚Ä¢	Reads user‚Äôs Google tokens from DB.
	‚Ä¢	Builds slides using existing Google Drive/Slides service functions.
	‚Ä¢	Returns { slidesUrl }.
	‚Ä¢	Reuse existing drive/slide helpers; if not present, create minimal adapter that creates a Slides file, populates a title slide, a few content slides from captures (title, summary, image if any), and returns the file URL.
	5.	Toast & progress:
	‚Ä¢	Use existing toast utility (shadcn/sonner/your toasts).
	‚Ä¢	States: idle ‚Üí running ‚Üí success/fail. Disable button while running.
	6.	Feature flag:
	‚Ä¢	Ensure client/src/flags.ts has PHASE5_BRIEF_EXPORT=true to gate the button if needed.

HUMAN STOP #3 ‚Äî Export smoke test
	‚Ä¢	In the app: select a few analyzed captures ‚Üí open Brief Builder ‚Üí click ‚ÄúExport‚Äù ‚Üí confirm pre-brief ‚Üí authorize Google (if prompted) ‚Üí verify a Slides URL returns and opens.
	‚Ä¢	Tell me if anything fails (auth, empty slides, wrong fields).

‚∏ª

3) Truth Analysis UX polish (Phase 5)
	1.	Captures Inbox (/captures-inbox):
	‚Ä¢	Ensure ‚ÄúRun Truth Analysis‚Äù exists for single & multi-select.
	‚Ä¢	When triggered:
	‚Ä¢	Disable action while running.
	‚Ä¢	Show toast: ‚ÄúAnalyzing N items‚Ä¶‚Äù
	‚Ä¢	On success, toasts per item or batch summary.
	‚Ä¢	Update row badges (e.g., ‚ÄúAnalyzed ‚úì‚Äù).
	2.	Loading indicators:
	‚Ä¢	Add isAnalyzing states to buttons or list items.
	‚Ä¢	Maintain a small status chip per capture (e.g., ai_analysis?.status).
	3.	Minimal guardrails:
	‚Ä¢	If provider fails (OpenAI timeout), show retry CTA.

HUMAN STOP #4 ‚Äî Analysis smoke test
	‚Ä¢	Pick a capture ‚Üí Run Truth Analysis ‚Üí make sure normalized JSON appears in DB and UI shows analyzed state.

‚∏ª

4) Phase 6 Scaffolding (routes + types + stubs)
	1.	Routes & shells:
	‚Ä¢	Add pages:
	‚Ä¢	client/src/pages/cohorts.tsx ‚Äî table/list of cohorts; empty state; ‚ÄúGenerate from selection‚Äù.
	‚Ä¢	client/src/pages/strategy-studio.tsx ‚Äî combine multiple analyses; show opportunities & recs (static placeholders for now).
	‚Ä¢	client/src/pages/slides-stage.tsx ‚Äî inline last-mile slide edits (placeholder UI; later we render slide ‚Äúcards‚Äù with editable text).
	‚Ä¢	Add to main router but hide behind feature flags in flags.ts:

export const PHASE6_COHORTS = true;
export const PHASE6_STRATEGY_STUDIO = true;
export const PHASE6_SLIDES_STAGE = true;


	2.	Types & DTOs:
	‚Ä¢	shared/phase6.types.ts:
	‚Ä¢	Cohort, StrategyArtifact, SlideDraft, Job, JobStatus.
	‚Ä¢	Keep minimal fields: id, project_id, name, source_capture_ids, etc.
	3.	Server stubs:
	‚Ä¢	server/jobs/jobQueue.ts (in-memory for now):

export type Job = { id:string; type:'analysis'|'export'; status:'queued'|'running'|'succeeded'|'failed'; meta?:any; };
const jobs = new Map<string, Job>();
export function enqueue(job: Job){ jobs.set(job.id, job); return job; }
export function getJob(id:string){ return jobs.get(id); }
export function setJobStatus(id:string, status:Job['status']){ const j=jobs.get(id); if(j){ j.status=status; jobs.set(id,j);} }


	‚Ä¢	server/routes/jobs.ts:
	‚Ä¢	POST /api/jobs (enqueue stub)
	‚Ä¢	GET /api/jobs/:id (status)
	‚Ä¢	Mount jobs.ts in server app.

	4.	Client job polling helper:
	‚Ä¢	client/src/services/jobs.ts ‚Äî createJob, getJobStatus, and useJobStatus(jobId) with polling.

HUMAN STOP #5 ‚Äî Routes visible
	‚Ä¢	Confirm the three new routes load (with flags true) and don‚Äôt break existing pages.

‚∏ª

5) Pre-Brief Review ‚Üí Slides mapping (quality pass)
	1.	In PreBriefReview:
	‚Ä¢	Derive section outline per capture (title, 1‚Äì2 bullets from ai_analysis).
	‚Ä¢	Show the final slide count estimate.
	‚Ä¢	On confirm: send {outline, captureIds, projectId, title} to server.
	2.	In server export:
	‚Ä¢	Use outline to name slides.
	‚Ä¢	Insert capture title + 1‚Äì2 bullets per slide.
	‚Ä¢	If an image URL exists in capture metadata, add it in a right/left content layout (fallback to text-only if none).
	‚Ä¢	Return the Slides URL.

HUMAN STOP #6 ‚Äî Quality check
	‚Ä¢	Export a brief and review slide structure: titles, bullets, any images placed.
	‚Ä¢	Note any mapping tweaks you want (order, slide templates, image size).

‚∏ª

6) Toasts, progress, and demo script
	1.	Toasts:
	‚Ä¢	Ensure all long ops (analysis/export) use consistent toasts and disabled states.
	2.	Add an end-to-end demo script:
	‚Ä¢	Add scripts/demo-e2e.md with click-path:
	1.	Login ‚Üí pick project
	2.	Go to Captures ‚Üí select 3 items ‚Üí Run Truth Analysis
	3.	Go to Brief Builder ‚Üí export ‚Üí get Slides link
	4.	(Optional) open /strategy-studio & /cohorts to see shells
	3.	NPM scripts:

{
  "scripts": {
    "typecheck": "tsc --noEmit",
    "verify": "npm run typecheck && npm run lint --if-present && npm run build",
    "dev": "vite"
  }
}



HUMAN STOP #7 ‚Äî Demo run
	‚Ä¢	Follow scripts/demo-e2e.md.
	‚Ä¢	Confirm the full loop works for at least one project.

‚∏ª

7) Health & System Gap Hooks
	1.	Heartbeat:
	‚Ä¢	Ensure /health/heartbeat returns { ok:true, version, time }.
	2.	System Gap:
	‚Ä¢	Ensure /health/gap returns any missing configs: e.g., { googleAuth:false } if tokens absent.
	3.	Client banner:
	‚Ä¢	If gap.googleAuth === false, show a small banner linking to /integrations.

HUMAN STOP #8 ‚Äî Health check
	‚Ä¢	Hit /health/heartbeat and /health/gap (via browser or curl).
	‚Ä¢	Confirm banners behave as expected when missing integrations.

‚∏ª

8) Final Verification & PR
	1.	Project-wide verification:

npm run verify


	2.	Commit & push:

git add -A
git commit -m "Phase 5 finish (Slides export + pre-brief review + toasts) and Phase 6 scaffolds (cohorts, strategy studio, slides stage, job queue)"
git push -u origin phase5-finish-phase6-scaffold


	3.	Open PR (or prepare summary for GitHub):
	‚Ä¢	Title: ‚ÄúPhase 5 finish + Phase 6 scaffolds‚Äù
	‚Ä¢	Include: demo steps, known limitations, flags to toggle.

HUMAN STOP #9 ‚Äî Review PR
	‚Ä¢	I‚Äôll review changes, test once more, and approve merge to main.

‚∏ª

9) Post-merge (optional)
	1.	Turn feature flags on/off in client/src/flags.ts as desired for rollout.
	2.	Create follow-up tasks for Phase 6 deep work:
	‚Ä¢	Cohort derive logic from ai_analysis.
	‚Ä¢	Strategy Studio synthesis (opportunities, recs).
	‚Ä¢	Slides Stage real editor (drag/drop, rich text).
	‚Ä¢	Background jobs + progress UI (replace in-memory queue).
	‚Ä¢	Curated feeds sidebar (RSS and saved searches).

‚∏ª

Notes for the Agent
	‚Ä¢	Do not print secret values at any time.
	‚Ä¢	If any expected file is missing, create it with minimal, production-safe defaults.
	‚Ä¢	If an existing export route already handles Slides, reuse it; don‚Äôt duplicate.
	‚Ä¢	Preserve existing imports and the @shared types usage.
	‚Ä¢	Keep all changes inside the current repo; do not generate a new repo.
	‚Ä¢	Ask for human confirmation at each HUMAN STOP before continuing.

‚∏ª

That‚Äôs it‚Äîpaste this Runbook into Replit Tasks and let it run. I‚Äôll jump in at each HUMAN STOP.